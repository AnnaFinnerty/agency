{"version":3,"sources":["Scripts/Helpers.js","Components/Industry/modal.js","Components/Agency/modal.js","Components/Header/index.js","Components/Email/view.js","Components/Email/new.js","Components/Email/index.js","Components/Tasks/index.js","Components/Employee/icon.js","Components/Employee/index.js","Components/Project/index.js","Components/Main/index.js","Components/Modal/context.js","Components/Sidebar/index.js","Components/Message/index.js","Scripts/Agency.js","Scripts/RandomAgency.js","Scripts/Employee.js","Scripts/MatchEmployeeToProject.js","Scripts/RandomEmployee.js","Scripts/Company.js","Scripts/RandomCompany.js","Scripts/Project.js","Scripts/RandomProject.js","Scripts/Industry.js","Scripts/TaskManagers.js","Scripts/RandomEmail.js","Scripts/RandomMessage.js","Components/Content/index.js","Components/App/index.js","serviceWorker.js","index.js"],"names":["Helpers","prototype","RandomFromArray","arr","Math","floor","random","length","RandomBetweenInts","start","end","XRandomWithoutRepeats","x","tempArr","fill","i","monify","num","toString","replace","IndustryModal","state","helpers","console","log","this","props","industry","clients","map","client","Card","Content","Header","name","Description","rep","full","competitors","competitor","income","monthlyProfit","Modal","open","style","height","Button","onClick","closeModal","float","Grid","columns","Column","width","Row","Component","AgencyModal","agency","yearsInOperation","coh","monthlyExpenditures","maxSalary","openModal","setState","openFull","elem","document","documentElement","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","fullscreen","closeFull","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","industryModalOpen","agencyModalOpen","profit","loss","Fragment","celled","padding","marginTop","employeeStats","productivity","happiness","hour","month","day","startYear","year","timeRunning","stopTimer","Icon","color","size","startTimer","ViewEmailModal","email","subject","closeEmail","sender","time","text","Actions","consider","considerProject","target","acceptProject","accept","NewEmailModal","suggestions","Email","newEmail","currentEmail","boxShowing","openEmail","emailIndex","openNew","emails","filter","read","sent","selectedEmails","key","className","overflow","display","selectedEmail","Container","marginBottom","addPane","Tasks","onSubmit","e","addTask","newTaskInput","onChange","value","tasks","task","borderRadius","margin","resolveTask","Form","Input","PersonalIcon","backgroundImage","icon","Employee","raiseSalary","updatedEmployee","info","updateEmployee","lowerSalary","promote","updateEmployeeLevel","demote","changeProject","data","newProject","projects","project","projectId","id","skills","skill","salary","projectOptions","type","unshift","skillScores","skillset","title","level","fireEmployee","hireApplicant","stats","match","Dropdown","placeholder","fluid","selection","options","Project","budget","required","requirements","requirement","optional","workers","worker","removedWorker","employeeOptions","employees","employee","skilltext","accepted","rejectProject","textAlign","parent","maxWidth","y","percentComplete","estimatedMonthsToCompletion","monthsActive","satisfaction","monthsToCompletion","payInInstallments","sector","addedEmployee","push","withdrawProject","Main","getPane","getPaneName","buildPane","pane","paneName","menuItem","Menu","Item","updatePane","pinned","removePane","render","Tab","Pane","panes","backgroundColor","overflowX","activeIndex","activePane","ModalContext","React","createContext","Sidebar","shortName","considering","applicants","applicant","dismissApplicant","overflowY","paddingTop","SidebarWrapper","Consumer","Message","close","messages","message","position","right","Feed","flexDirection","justifyContent","Agency","reputation","experience","calculateAgencyParameters","totalSalaries","totalIncome","monthes","overhead","monthlySalaries","numActiveProjects","Date","getFullYear","completedProjects","autoUpdate","RandomAgency","icons","generateRandomAgency","isFake","randomAgencyName","r","first","second","gender","age","focus","quit","problems","projectSkills","job","MatchEmployeeToProject","matchScore","employeeSkills","Object","keys","includes","RandomEmployee","employeeId","maxLeaders","currentLeaders","usedNames","femaleIcons","maleIcons","neutralIcons","generateStartEmployees","numEmployees","numLeaders","startProjects","startEmployees","generateRandomEmployee","randomFromArray","calculateProductivity","generateEmployeeID","positionLevel","randomGender","randomName","randomBetweenInts","maxLevel","randomSkillset","randomStats","skillSet","skillsets","ux","frontend","backend","datascience","management","focii","focusOne","focusTwo","skillsSelection","randomSkills","creativity","accuracy","curiosity","dedication","first_name","first_name_male","first_name_female","combine","concat","lastName","last","charAt","short","Company","activeProject","RandomCompany","randomEmployee","generateRandomCompany","sectors","projectSectors","names","randomCompanyName","minCost","maxCost","minDesign","maxDesign","firstwords","secondwords","company","totalPaid","onTime","complete","payment","w","RandomProject","generateRandomProject","isStartProject","types","projectTypes","Industry","startCompetitors","maxCompetitors","randomCompany","randomAgency","randomProject","awake","monthlyUpdate","TaskManager","removeTask","splice","RandomEmail","generateRandomEmail","boss","employee1","employee2","bossEmail","happyEmail","complaintEmail","requestEmail","generateEmail","toLocaleString","applicantEmail","projectEmail","completeEmail","welcomeEmail","quitEmail","junkEmail","junkSubject","junkBody","complaintBody","applicantBody","quitBody","happyBody","fireEmail","RandomMessage","generateRandomMessage","generateMessage","junkMessage","starred","numStartEmployees","numStartProjects","startApplicants","startEmails","newProjectEmail","randomEmailGenerator","randomEmployeeGenerator","appEmail","startProject","sortedEmployees","sortEmployees","interval","setInterval","update","hourLength","newEmployeeStats","employeeStatsRaw","a","projectsToDelete","b","updateParams","emailFrequency","employee3","randomMessageGenerator","projectFrequency","finalEmails","slice","finalMessages","clearInterval","removeWorker","sort","event","deleteEmail","generateTask","test","requester","action","dismissTask","addMessage","consideredProject","rejectedProject","withdrawnProject","openMessage","closeMessage","fired","sidebarRight","totalPositions","taskManager","randomProjectGenerator","messageOpen","App","testing","Boolean","window","location","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAAA,SAASA,KAETA,EAAQC,UAAUC,gBAAkB,SAASC,GACzC,OAAOA,EAAIC,KAAKC,MAAMD,KAAKE,SAASH,EAAII,UAG5CP,EAAQC,UAAUO,kBAAoB,SAASC,EAAMC,GACjD,OAAON,KAAKC,MAAMD,KAAKE,UAAUI,EAAID,IAAUA,GAInDT,EAAQC,UAAUU,sBAAwB,SAASR,EAAIS,GACnD,IAAMC,EAAU,GAChBA,EAAQC,KAAK,EAAEX,EAAII,OAAO,GAC1B,IAAI,IAAIQ,EAAI,EAAGA,EAAIH,EAAGG,IACRX,KAAKC,MAAMD,KAAKE,SAASO,IAK3Cb,EAAQC,UAAUe,OAAS,SAASC,GACjC,MAAO,IAAMA,EAAIC,WAAWC,QAAQ,uBAAwB,QAGhDnB,Q,oCCqCAoB,E,YAvDX,aAAc,IAAD,8BACT,+CACKC,MAAQ,GACb,EAAKC,QAAU,IAAItB,EAHV,E,sEAKJ,IAAD,OACJuB,QAAQC,IAAI,iBAAiBC,KAAKC,MAAMC,UACxC,IAAMC,EAAUH,KAAKC,MAAMC,SAASC,QAAQC,KAAI,SAACC,GAC7C,OACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,QAAN,KACI,kBAACD,EAAA,EAAKE,OAAN,KAAcH,EAAOI,MACrB,kBAACH,EAAA,EAAKI,YAAN,aACUL,EAAOM,IAAIF,KAAKG,WAMpCC,EAAcb,KAAKC,MAAMC,SAASW,YAAYT,KAAI,SAACU,GACrD,IAAMC,EAAS,EAAKlB,QAAQN,OAAkC,GAA3BuB,EAAWE,eAC9C,OACI,kBAACV,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,QAAN,KACI,kBAACD,EAAA,EAAKE,OAAN,KAAcM,EAAWL,MACzB,kBAACH,EAAA,EAAKI,YAAN,uBACoBK,QAMpC,OACI,kBAACE,EAAA,EAAD,CAAOC,KAAMlB,KAAKC,MAAMiB,KAAMC,MAAO,CAACC,OAAO,SACzC,kBAACH,EAAA,EAAMT,OAAP,gBAEI,kBAACa,EAAA,EAAD,CAAQC,QAAS,kBAAI,EAAKrB,MAAMsB,WAAW,sBAAsBJ,MAAO,CAACK,MAAM,UAA/E,MAEJ,kBAACP,EAAA,EAAMV,QAAP,KACI,kBAACkB,EAAA,EAAD,CAAMC,QAAS,GACX,kBAACD,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAChB,kBAACH,EAAA,EAAKI,IAAN,gBACC1B,GAEL,kBAACsB,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAChB,kBAACH,EAAA,EAAKI,IAAN,oBACChB,U,GA/CDiB,aCmDbC,E,YAnDX,aAAc,IAAD,8BACT,+CACKnC,MAAQ,GAFJ,E,sEAUJ,IAAD,OAEJ,OACI,kBAACqB,EAAA,EAAD,CAAOC,KAAMlB,KAAKC,MAAMiB,KAAMC,MAAO,CAACC,OAAO,SACzC,kBAACH,EAAA,EAAMT,OAAP,KACKR,KAAKC,MAAM+B,OAAOvB,KACnB,kBAACY,EAAA,EAAD,CAAQC,QAAS,kBAAI,EAAKrB,MAAMsB,WAAW,oBAAoBJ,MAAO,CAACK,MAAM,UAA7E,MAEJ,kBAACP,EAAA,EAAMV,QAAP,KACA,kBAACU,EAAA,EAAMP,YAAP,KACI,kBAACe,EAAA,EAAD,CAAMC,QAAS,GACX,kBAACD,EAAA,EAAKE,OAAN,KACI,kBAACF,EAAA,EAAKI,IAAN,4BACA,kBAACJ,EAAA,EAAKI,IAAN,sBACA,kBAACJ,EAAA,EAAKI,IAAN,0BACA,kBAACJ,EAAA,EAAKI,IAAN,wBACA,kBAACJ,EAAA,EAAKI,IAAN,yBACA,kBAACJ,EAAA,EAAKI,IAAN,yBACA,kBAACJ,EAAA,EAAKI,IAAN,wBACA,kBAACJ,EAAA,EAAKI,IAAN,uBACA,kBAACJ,EAAA,EAAKI,IAAN,yBAEJ,kBAACJ,EAAA,EAAKE,OAAN,KACI,kBAACF,EAAA,EAAKI,IAAN,KAAW7B,KAAKC,MAAM+B,OAAOC,kBAC7B,kBAACR,EAAA,EAAKI,IAAN,KAAW7B,KAAKC,MAAM+B,OAAOE,KAC7B,kBAACT,EAAA,EAAKI,IAAN,KAAW7B,KAAKC,MAAM+B,OAAOG,qBAC7B,kBAACV,EAAA,EAAKI,IAAN,KAAW7B,KAAKC,MAAM+B,OAAOhB,eAC7B,kBAACS,EAAA,EAAKI,IAAN,yBACA,kBAACJ,EAAA,EAAKI,IAAN,yBACA,kBAACJ,EAAA,EAAKI,IAAN,KAAW7B,KAAKC,MAAM+B,OAAOI,WAC7B,kBAACX,EAAA,EAAKI,IAAN,uBACA,kBAACJ,EAAA,EAAKI,IAAN,iC,GA1CFC,a,gBC8HXtB,E,YAvHb,aAAc,IAAD,8BACX,+CAQF6B,UAAY,SAAC5B,GACX,EAAK6B,SAAL,eACG7B,GAAO,KAXC,EAcbc,WAAa,SAACd,GACZ,EAAK6B,SAAL,eACG7B,GAAO,KAhBC,EAmBb8B,SAAW,WACT,IAAMC,EAAOC,SAASC,gBAClBF,EAAKG,kBACPH,EAAKG,oBACIH,EAAKI,qBACdJ,EAAKI,uBACIJ,EAAKK,wBACdL,EAAKK,0BACIL,EAAKM,qBACdN,EAAKM,sBAEP,EAAKR,SAAS,CACZS,YAAY,KA/BH,EAkCbC,UAAY,WACNP,SAASQ,eACXR,SAASQ,iBACAR,SAASS,oBAClBT,SAASS,sBACAT,SAASU,qBAClBV,SAASU,uBACAV,SAASW,kBAClBX,SAASW,mBAEX,EAAKd,SAAS,CACZS,YAAY,KA3Cd,EAAKnD,MAAQ,CACVyD,mBAAmB,EACnBC,iBAAiB,EACjBP,YAAY,GAEf,EAAKlD,QAAU,IAAItB,EAPR,E,sEAgDJ,IAAD,OAEA2D,EAAMlC,KAAKH,QAAQN,OAAOS,KAAKC,MAAM+B,OAAOE,KAC5CqB,EAASvD,KAAKH,QAAQN,OAAOS,KAAKC,MAAM+B,OAAOhB,eAC/CwC,EAAOxD,KAAKH,QAAQN,OAAOS,KAAKC,MAAM+B,OAAOG,qBACnD,OACE,kBAAC,IAAMsB,SAAP,KACE,gCACE,6BACE,kBAAChC,EAAA,EAAD,CAAMiC,OAAO,cACT,kBAACjC,EAAA,EAAKE,OAAN,CAAaC,MAAO,EAAGT,MAAO,CAACwC,QAAQ,WACrC,4BAAK3D,KAAKC,MAAM+B,OAAOvB,MACvB,wBAAIU,MAAO,CAACyC,UAAU,MAAO5D,KAAKC,MAAM+B,OAAOC,iBAA/C,uBACA,kBAACR,EAAA,EAAKI,IAAN,KACE,4BAAQP,QAAS,kBAAI,EAAKe,UAAU,qBAApC,UACA,4BAAQf,QAAS,kBAAI,EAAKe,UAAU,uBAApC,cAGJ,kBAACZ,EAAA,EAAKE,OAAN,CAAaC,MAAO,EAAGT,MAAO,CAACwC,QAAQ,MACrC,kBAAClC,EAAA,EAAKI,IAAN,qBACA,kBAACJ,EAAA,EAAKI,IAAN,qBACA,kBAACJ,EAAA,EAAKI,IAAN,mBACA,kBAACJ,EAAA,EAAKI,IAAN,yBACA,kBAACJ,EAAA,EAAKI,IAAN,uBAEF,kBAACJ,EAAA,EAAKE,OAAN,CAAaC,MAAO,EAAGT,MAAO,CAACwC,QAAQ,MACrC,kBAAClC,EAAA,EAAKI,IAAN,KAAWK,GACX,kBAACT,EAAA,EAAKI,IAAN,KAAW0B,GACX,kBAAC9B,EAAA,EAAKI,IAAN,KAAW2B,GACX,kBAAC/B,EAAA,EAAKI,IAAN,KAAW7B,KAAKC,MAAM4D,cAAcC,aAApC,KACA,kBAACrC,EAAA,EAAKI,IAAN,KAAW7B,KAAKC,MAAM4D,cAAcE,UAApC,MAGF,kBAACtC,EAAA,EAAKE,OAAN,CAAaC,MAAO,EAAGT,MAAO,CAACwC,QAAQ,MACrC,kBAAClC,EAAA,EAAKI,IAAN,KACI,8BAAO7B,KAAKC,MAAM+D,KAAO,GAAK,IAAMhE,KAAKC,MAAM+D,KAAO,MAAQhE,KAAKC,MAAM+D,KAAO,QAEpF,kBAACvC,EAAA,EAAKI,IAAN,KACE,8BAAO7B,KAAKC,MAAMgE,OADpB,IACkC,8BAAOjE,KAAKC,MAAMiE,KADpD,IACgE,8BAAOlE,KAAKC,MAAMkE,UAAUnE,KAAKC,MAAMmE,OAEvG,kBAAC3C,EAAA,EAAKI,IAAN,KAEK7B,KAAKC,MAAMoE,YAGZ,kBAAChD,EAAA,EAAD,CAAQC,QAAStB,KAAKC,MAAMqE,UAAWnD,MAAO,CAACwC,QAAQ,QAAQ,kBAACY,EAAA,EAAD,CAAMC,MAAM,MAAM/D,KAAK,UAFtF,kBAACY,EAAA,EAAD,CAAQmD,MAAM,QAAQC,KAAK,QAAQtD,MAAO,CAACwC,QAAQ,OAAQrC,QAAStB,KAAKC,MAAMyE,YAAY,kBAACH,EAAA,EAAD,CAAM9D,KAAK,UAKrGT,KAAKJ,MAAMmD,WAGZ,kBAAC1B,EAAA,EAAD,CAAQC,QAAStB,KAAKgD,UAAW7B,MAAO,CAACwC,QAAQ,QAAQ,kBAACY,EAAA,EAAD,CAAM9D,KAAK,4BAFpE,kBAACY,EAAA,EAAD,CAAQC,QAAStB,KAAKuC,SAAUpB,MAAO,CAACwC,QAAQ,QAAQ,kBAACY,EAAA,EAAD,CAAM9D,KAAK,kCAUhFT,KAAKJ,MAAMyD,kBACZ,kBAAC,EAAD,CAAenD,SAAUF,KAAKC,MAAMC,SAAUgB,KAAMlB,KAAKJ,MAAMyD,kBAAmB9B,WAAYvB,KAAKuB,aADnE,GAI/BvB,KAAKJ,MAAM0D,gBACZ,kBAAC,EAAD,CAAatB,OAAQhC,KAAKC,MAAM+B,OAAQd,KAAMlB,KAAKJ,MAAM0D,gBAAiB/B,WAAYvB,KAAKuB,aAD7D,Q,GAhHjBO,a,SC+CN6C,EArDQ,SAAC1E,GAAD,OACnB,kBAACgB,EAAA,EAAD,CAAOC,KAAMjB,EAAMiB,MACf,kBAACD,EAAA,EAAMT,OAAP,KACKP,EAAM2E,MAAMC,QACb,kBAACxD,EAAA,EAAD,CAAQC,QAASrB,EAAM6E,WAAY3D,MAAO,CAACK,MAAM,UAAjD,MAIJ,kBAACP,EAAA,EAAMV,QAAP,KAOA,kBAAC,IAAD,KAASN,EAAM2E,MAAMG,OAAOtE,KAAKmE,OACjC,kBAAC,IAAD,gCACA,kBAAC,IAAD,KAAS3E,EAAM2E,MAAMI,MACrB,kBAAC/D,EAAA,EAAMP,YAAP,KAEKT,EAAM2E,MAAMK,OAGjB,qCACA,6BACA,kBAAChE,EAAA,EAAMiE,QAAP,KAESjF,EAAM2E,MAAMO,SACb,kBAAC,IAAM1B,SAAP,KACI,kBAACpC,EAAA,EAAD,CAAQC,QAAS,kBAAIrB,EAAMmF,gBAAgBnF,EAAM2E,MAAMS,UAAvD,4BACA,kBAAChE,EAAA,EAAD,CAAQC,QAAS,kBAAIrB,EAAMqF,cAAcrF,EAAM2E,MAAMS,UAArD,qBACA,kBAAChE,EAAA,EAAD,mCAJoB,GAQvBpB,EAAM2E,MAAMW,OACb,kBAAC,IAAM9B,SAAP,KACI,kBAACpC,EAAA,EAAD,eACA,kBAACA,EAAA,EAAD,gBAHkB,GAOtBpB,EAAM2E,MAAMW,QAAUtF,EAAM2E,MAAMO,SAAY,GAC9C,kBAAC,IAAM1B,SAAP,KACI,kBAACpC,EAAA,EAAD,cACA,kBAACA,EAAA,EAAD,oBCjBLmE,E,YA3BX,aAAc,IAAD,8BACT,+CACKC,YAAc,CAAC,IAFX,E,sEAOT,OACI,kBAACxE,EAAA,EAAD,CAAOC,KAAMlB,KAAKC,MAAMiB,MACpB,kBAACD,EAAA,EAAMT,OAAP,KACI,kBAACa,EAAA,EAAD,CAAQC,QAAStB,KAAKC,MAAM6E,WAAY3D,MAAO,CAACK,MAAM,UAAtD,MAIJ,kBAACP,EAAA,EAAMV,QAAP,KACA,kBAACU,EAAA,EAAMP,YAAP,OAIA,kBAACO,EAAA,EAAMiE,QAAP,KACI,kBAAC7D,EAAA,EAAD,oB,GArBQS,a,SC8Fb4D,E,YAzFb,aAAc,IAAD,8BACX,+CAQFC,SAAW,WACT,EAAKrD,SAAS,CACZsD,aAAc,KACdC,WAAY,QACZC,WAAW,EACXH,UAAU,KAdD,EAiBbG,UAAY,SAACC,GACX,EAAKzD,SAAS,CACZsD,aAAcG,EACdD,WAAW,KApBF,EAuBbhB,WAAa,WACX,EAAKxC,SAAS,CACZsD,aAAc,KACdE,WAAW,EACXE,SAAS,KAzBX,EAAKpG,MAAQ,CACXiG,WAAY,QACZC,WAAW,EACXE,SAAS,EACTJ,aAAc,MANL,E,sEA8BJ,IAAD,OACN9F,QAAQC,IAAI,eAAeC,KAAKC,MAAMgG,QACtC,IAAIA,EAASjG,KAAKC,MAAMgG,OACK,UAA1BjG,KAAKJ,MAAMiG,WACZI,EAASjG,KAAKC,MAAMgG,OAAOC,QAAO,SAACtB,GAAD,OAAWA,EAAMuB,QAChB,SAA1BnG,KAAKJ,MAAMiG,aACpBI,EAASjG,KAAKC,MAAMgG,OAAOC,QAAO,SAACtB,GAAD,OAAUA,EAAMwB,SAEpD,IAAMC,EAAkBJ,EAAOnH,OAAcmH,EAAO7F,KAAI,SAACwE,EAAMtF,GAC7D,OACE,kBAACmC,EAAA,EAAD,CAAM6E,IAAK,SAAShH,EAAGoC,QAAS,EAAGJ,QAAS,kBAAI,EAAKwE,UAAUxG,IAAIiH,UAAU,QAAQpF,MAAO,CAACC,OAAO,MAAMoF,SAAS,WACjH,kBAAC/E,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAClB,kBAAC2C,EAAA,EAAD,CAAM9D,KAAK,UAEb,kBAACgB,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAAIgD,EAAMG,OAAOtE,KAAKgG,QAA1C,KACA,kBAAChF,EAAA,EAAKE,OAAN,CAAaC,MAAO,GACjBgD,EAAMC,SAET,kBAACpD,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAChBgD,EAAMK,MAEV,kBAACxD,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAChBgD,EAAMI,UAdwB,GAoBlC0B,EAAgB1G,KAAKJ,MAAMkG,UAAY9F,KAAKC,MAAMgG,OAAOjG,KAAKJ,MAAMgG,cAAgB,GAC1F,OACE,kBAAC,IAAMnC,SAAP,KACE,kBAACkD,EAAA,EAAD,CAAWxF,MAAO,CAACC,OAAO,SACxB,qCACA,kBAACC,EAAA,EAAD,CAAQC,QAAStB,KAAK2F,UAAtB,KACA,kBAACtE,EAAA,EAAD,cACA,kBAACA,EAAA,EAAD,aACA,kBAACA,EAAA,EAAD,YACA,wBAAIF,MAAO,CAACyF,aAAa,SACxBP,GAGArG,KAAKJ,MAAMgG,aACZ,kBAAC,EAAD,CAAgB1E,KAAMlB,KAAKJ,MAAMkG,UACjBlB,MAAO8B,EACP5B,WAAY9E,KAAK8E,WACjB+B,QAAS7G,KAAKC,MAAM4G,QACpBvB,cAAetF,KAAKC,MAAMqF,cAC1BF,gBAAiBpF,KAAKC,MAAMmF,kBANjB,GAU1BpF,KAAKJ,MAAM+F,SACZ,kBAAC,EAAD,CAAezE,KAAMlB,KAAKJ,MAAM+F,SAAUb,WAAY9E,KAAK8E,aADpC,Q,GAlFbhD,a,kBC0CLgF,E,YA5Cb,WAAY7G,GAAO,IAAD,8BACd,+CAKJ8G,SAAW,SAACC,GACV,EAAK/G,MAAMgH,QAAQ,EAAKrH,MAAMsH,eAPd,EASlBC,SAAW,SAACH,GACV,EAAK1E,SAAL,eACK0E,EAAE3B,OAAO5E,KAAOuG,EAAE3B,OAAO+B,SAT5B,EAAKxH,MAAQ,CACTsH,aAAc,IAHJ,E,sEAcT,IAAD,OACNpH,QAAQC,IAAI,cAAeC,KAAKC,OAChC,IAAMoH,EAAQrH,KAAKC,MAAMoH,MAAMjH,KAAI,SAACkH,EAAMhI,GACtC,OACI,yBAAKgH,IAAKhH,EAAGiH,UAAU,QAClB,kBAAClF,EAAA,EAAD,CAAQF,MAAO,CAACwC,QAAQ,MAAM4D,aAAa,SACxC,kBAAChD,EAAA,EAAD,CAAMpD,MAAO,CAACqG,OAAO,KAAM/G,KAAK,YAEpC,8BAAO6G,GACP,kBAACjG,EAAA,EAAD,CAAQC,QAAS,kBAAI,EAAKrB,MAAMwH,YAAYnI,IAAI6B,MAAO,CAACwC,QAAQ,MAAM4D,aAAa,SAC/E,kBAAChD,EAAA,EAAD,CAAMpD,MAAO,CAACqG,OAAO,KAAM/G,KAAK,gBAKhD,OACI,6BACI,kBAAC,IAAD,cACA,kBAACiH,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOlH,KAAK,eAAe2G,MAAOpH,KAAKJ,MAAMsH,aAAcC,SAAU,SAACH,GAAD,OAAK,EAAKG,SAASH,MACxF,kBAAC3F,EAAA,EAAD,CAAQC,QAAStB,KAAK+G,UAAtB,WAEJ,4BACKM,Q,GAtCGvF,aCCL8F,EAJM,SAAC3H,GAAD,OACjB,yBAAKsG,UAAU,gBAAgBpF,MAAO,CAAC0G,gBAAgB,eAAe5H,EAAM6H,KAAK,a,SC+KtEC,E,YAzKb,aAAc,IAAD,8BACX,+CAEFC,YAAc,WACZ,IAAMC,EAAkB,EAAKhI,MAAMiI,KACnCD,EAAgBD,cAChB,EAAK/H,MAAMkI,eAAeF,IANf,EAQbG,YAAc,WACZ,IAAMH,EAAkB,EAAKhI,MAAMiI,KACnCD,EAAgBG,cAChB,EAAKnI,MAAMkI,eAAeF,IAXf,EAabI,QAAU,WACR,IAAMJ,EAAkB,EAAKhI,MAAMiI,KACnCD,EAAgBI,UAChB,EAAKpI,MAAMqI,oBAAoBL,IAhBpB,EAkBbM,OAAS,WACP,IAAMN,EAAkB,EAAKhI,MAAMiI,KACnCD,EAAgBM,SAChB,EAAKtI,MAAMqI,oBAAoBL,IArBpB,EAuBbO,cAAgB,SAACxB,EAAEyB,GACjB3I,QAAQC,IAAI,uBAAwB0I,EAAKrB,OACzC,IAAMsB,EAAa,EAAKzI,MAAM0I,SAASF,EAAKrB,OACtCa,EAAkB,EAAKhI,MAAMiI,KAEnCD,EAAgBW,QAAUF,GAA0B,KACpDT,EAAgBY,UAAYH,EAAaA,EAAWI,GAAK,KACzD,EAAK7I,MAAMqI,oBAAoBL,IA9BpB,E,sEAiCJ,IAAD,OACNnI,QAAQC,IAAI,kBAAkBC,KAAKC,OACnC,IAAM8I,EAAS/I,KAAKC,MAAMiI,KAAKa,OAAO3I,KAAI,SAAC4I,EAAM1J,GAC/C,OACE,wBAAIgH,IAAOhH,GAAI0J,MAIfC,GADU,IAAI1K,GACGgB,OAAOS,KAAKC,MAAMiI,KAAKe,QACxCC,EAAqC,cAApBlJ,KAAKC,MAAMkJ,KAAuB,GAAKnJ,KAAKC,MAAM0I,SAASvI,KAAI,SAACwI,EAAQtJ,GACP,MACE,CACEgH,IAAKsC,EAAQE,GACb7D,KAAM2D,EAAQnI,KACd2G,MAAO9H,MAKnG4J,EAAeE,QAAQ,CACrB9C,IAAK,MACLrB,KAAM,OACNmC,MAAO,OAE6E,IAAMiC,EAAcrJ,KAAKC,MAAMiI,KAAKa,OAAO3I,KAAI,SAAC4I,EAAM1J,GAC1I,OAAO,wBAAIgH,IAAK,SAAShH,GAAI,EAAKW,MAAMiI,KAAKoB,SAASN,OAExD,OACI,kBAACvH,EAAA,EAAD,CAAMiC,QAAM,GACV,kBAACjC,EAAA,EAAKI,IAAN,KACE,kBAACJ,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAClB,4BACE,kBAAC,EAAD,CAAckG,KAAM9H,KAAKC,MAAMiI,KAAKJ,OACnC9H,KAAKC,MAAMiI,KAAKzH,KAAKG,OAE1B,kBAACa,EAAA,EAAKE,OAAN,CAAaC,MAAO,GACjB5B,KAAKC,MAAMiI,KAAKqB,OAEnB,kBAAC9H,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAApB,MACM5B,KAAKC,MAAMiI,KAAKY,IAEtB,kBAACrH,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAEU,IAA1B5B,KAAKC,MAAMiI,KAAKsB,MAAc,GACV,cAApBxJ,KAAKC,MAAMkJ,KACX,kBAAC9H,EAAA,EAAD,CAAQC,QAAS,kBAAI,EAAKrB,MAAMwJ,aAAa,EAAKxJ,MAAMiI,KAAKY,MAA7D,QAEA,kBAACzH,EAAA,EAAD,CAAQC,QAAS,kBAAI,EAAKrB,MAAMyJ,cAAc,EAAKzJ,MAAMiI,QAAzD,UAIN,kBAACzG,EAAA,EAAKI,IAAN,KACE,kBAACJ,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAApB,iBAGA,kBAACH,EAAA,EAAKE,OAAN,CAAaC,MAAO,GACjB5B,KAAKC,MAAMiI,KAAKyB,MAAM7F,cAEzB,kBAACrC,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAApB,aAGA,kBAACH,EAAA,EAAKE,OAAN,CAAaC,MAAO,GACjB5B,KAAKC,MAAMiI,KAAKyB,MAAM5F,YAIC,IAA1B/D,KAAKC,MAAMiI,KAAKsB,OAAmC,cAApBxJ,KAAKC,MAAMkJ,KAAuB,GACjE,kBAAC1H,EAAA,EAAKI,IAAN,KACE,kBAACJ,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAApB,YACY5B,KAAKC,MAAMiI,KAAKW,UAAY7I,KAAKC,MAAMiI,KAAKU,QAAQnI,KAAO,cAEvE,kBAACgB,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAApB,UACU5B,KAAKC,MAAMiI,KAAKW,UAAY7I,KAAKC,MAAMiI,KAAK0B,MAAQ,OAE9D,kBAACnI,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAApB,mBAGA,kBAACH,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAClB,kBAACiI,EAAA,EAAD,CACIC,YAAY,iBACZC,OAAK,EACLC,WAAS,EACTC,QAASf,EACT/B,SAAUnH,KAAKwI,kBAKzB,kBAAC/G,EAAA,EAAKI,IAAN,KACE,kBAACJ,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAApB,UAGA,kBAACH,EAAA,EAAKE,OAAN,CAAaC,MAAO,GACjB5B,KAAKC,MAAMiI,KAAKsB,OAEnB,kBAAC/H,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAClB,kBAACP,EAAA,EAAD,CAAQC,QAAStB,KAAKqI,SAAtB,YAEF,kBAAC5G,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAClB,kBAACP,EAAA,EAAD,CAAQC,QAAStB,KAAKuI,QAAtB,YAIJ,kBAAC9G,EAAA,EAAKI,IAAN,KACE,kBAACJ,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAApB,WAGA,kBAACH,EAAA,EAAKE,OAAN,CAAaC,MAAO,GACjBqH,GAEH,kBAACxH,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAClB,kBAACP,EAAA,EAAD,CAAQC,QAAStB,KAAKgI,aAAtB,UAEF,kBAACvG,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAClB,kBAACP,EAAA,EAAD,CAAQC,QAAStB,KAAKoI,aAAtB,WAGJ,kBAAC3G,EAAA,EAAKI,IAAN,KACE,kBAACJ,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAApB,WAGA,kBAACH,EAAA,EAAKE,OAAN,CAAaC,MAAO,GACjBmH,GAEH,kBAACtH,EAAA,EAAKE,OAAN,CAAaC,MAAO,GACjByH,GAEH,kBAAC5H,EAAA,EAAKE,OAAN,CAAaC,MAAO,KAEtB,kBAACH,EAAA,EAAKI,IAAN,W,GAnKeC,a,SCsKRoI,MAtKf,SAAiBjK,GACfH,QAAQC,IAAI,gBAAgBE,GAC5B,IAmBMkK,GADU,IAAI5L,GACGgB,OAAOU,EAAMiI,KAAKiC,QACnCC,EAAWnK,EAAMiI,KAAKmC,aAAaD,SAAShK,KAAI,SAACkK,EAAYhL,GACjE,OACE,wBAAIgH,IAAK,YAAYhH,GAClBgL,MAIDC,EAAWtK,EAAMiI,KAAKmC,aAAaE,SAASnK,KAAI,SAACkK,EAAYhL,GACjE,OACE,wBAAIgH,IAAK,YAAYhH,GAClBgL,MAIDE,EAAUvK,EAAMiI,KAAKsC,QAAQpK,KAAI,SAACqK,GACtC,IAAM1B,EAAS0B,EAAO1B,OAAO3I,KAAI,SAAC4I,EAAM1J,GACtC,OACE,kBAAC,IAAMmE,SAAP,CAAgB6C,IAAKmE,EAAO3B,GAAG,UAAUxJ,GACvC,kBAACmC,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAAIoH,GACxB,kBAACvH,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAAI6I,EAAOnB,SAASN,QAI9C,OACE,kBAACvH,EAAA,EAAD,CAAMC,QAAS,EAAG4E,IAAKmE,EAAO3B,IAC1B,kBAACrH,EAAA,EAAKE,OAAN,CAAaC,MAAO,EAAGN,QAAS,kBAAIrB,EAAM4G,QAAQ,WAAW4D,IAASlE,UAAU,SAAUkE,EAAOhK,KAAKgG,SAErGsC,EACD,kBAACtH,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAChB,kBAACP,EAAA,EAAD,CAAQC,QAAS,kBAjDLoJ,EAiDwBD,EAhD9C3K,QAAQC,IAAI,iCAAiC2K,GAC7CA,EAAc7B,UAAY,KAC1B6B,EAAc9B,QAAQ4B,QAAUE,EAAc9B,QAAQ4B,QAAQtE,QAAO,SAACuE,GAAD,OAAWA,EAAO3B,KAAO4B,EAAc5B,WAC5G7I,EAAMkI,eAAeuC,GAJA,IAACA,IAiDZ,eAMNC,EADsB1K,EAAM2K,UAAU1E,QAAO,SAAC2E,GAAD,OAAiC,IAAnBA,EAASrB,OAAeqB,EAAShC,YAAc5I,EAAMiI,KAAKY,MAC/E1I,KAAI,SAACyK,EAASvL,GACxD,MACE,CACEgH,IAAKuE,EAAS/B,GACd7D,KAAM4F,EAASpK,KAAKG,KAAO,KAAOiK,EAASC,UAC3C1D,MAAO9H,MAIb,OACE,6BACE,4BAAKW,EAAMiI,KAAKzH,MAChB,sCACGR,EAAMiI,KAAK6C,SAAW,SAAW,eAChC9K,EAAMiI,KAAK6C,SAMX,GALA,kBAAC,IAAMtH,SAAP,KACE,kBAACpC,EAAA,EAAD,CAAQC,QAAS,kBAAIrB,EAAMqF,cAAcrF,EAAMiI,QAA/C,UACA,kBAAC7G,EAAA,EAAD,CAAQC,QAAS,kBAAIrB,EAAM+K,cAAc/K,EAAMiI,KAAKY,MAApD,YAMN,kBAACrH,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKE,OAAN,CAAaC,MAAO,EAAGT,MAAO,CAAC8J,UAAU,WAAzC,mBAEE,kBAAC,IAAD,CACE9J,MAAO,CAAE+J,OAAQ,CAAEC,SAAU,SAC7B1C,KAAM,CACJ,CAAEtJ,EAAG,IAAKiM,EAAGnL,EAAMiI,KAAKmD,iBACxB,CAAElM,EAAG,IAAKiM,EAAG,IAAInL,EAAMiI,KAAKmD,qBAIlC,kBAAC5J,EAAA,EAAKE,OAAN,CAAaC,MAAO,EAAGT,MAAO,CAAC8J,UAAU,WAAzC,iBAEE,kBAAC,IAAD,CACE9J,MAAO,CAAE+J,OAAQ,CAAEC,SAAU,SAC7B1C,KAAM,CACJ,CAAEtJ,EAAG,IAAKiM,EAAGnL,EAAMiI,KAAKoD,6BACxB,CAAEnM,EAAG,IAAKiM,EAAGnL,EAAMiI,KAAKqD,mBAKhC,kBAAC9J,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAClB,kBAACH,EAAA,EAAKI,IAAN,yBACA,kBAACJ,EAAA,EAAKI,IAAN,qBACA,kBAACJ,EAAA,EAAKI,IAAN,8BAEF,kBAACJ,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAClB,kBAACH,EAAA,EAAKI,IAAN,KAAW5B,EAAMiI,KAAKmD,iBACtB,kBAAC5J,EAAA,EAAKI,IAAN,KAAW5B,EAAMiI,KAAKpE,aAAtB,KACA,kBAACrC,EAAA,EAAKI,IAAN,KAAW5B,EAAMiI,KAAKsD,aAAtB,MAEF,kBAAC/J,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAClB,kBAACH,EAAA,EAAKI,IAAN,oBACA,kBAACJ,EAAA,EAAKI,IAAN,oBACA,kBAACJ,EAAA,EAAKI,IAAN,eACA,kBAACJ,EAAA,EAAKI,IAAN,+BAEF,kBAACJ,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAClB,kBAACH,EAAA,EAAKI,IAAN,KAAW5B,EAAMiI,KAAKoD,6BACtB,kBAAC7J,EAAA,EAAKI,IAAN,KAAW5B,EAAMiI,KAAKuD,oBACtB,kBAAChK,EAAA,EAAKI,IAAN,KAAWsI,GACX,kBAAC1I,EAAA,EAAKI,IAAN,KAAW5B,EAAMiI,KAAKwD,kBAAoB,MAAQ,QAGtD,4CACA,kBAACjK,EAAA,EAAD,CAAMC,QAAS,GACb,kBAACD,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAClB,kBAACH,EAAA,EAAKI,IAAN,eACA,kBAACJ,EAAA,EAAKI,IAAN,mBAEF,kBAACJ,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAClB,kBAACH,EAAA,EAAKI,IAAN,KAAW5B,EAAMiI,KAAKyD,QACrBvB,GAEH,kBAAC3I,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAClB,kBAACH,EAAA,EAAKI,IAAN,aACA,kBAACJ,EAAA,EAAKI,IAAN,mBAEF,kBAACJ,EAAA,EAAKE,OAAN,CAAaC,MAAO,GACpB,kBAACH,EAAA,EAAKI,IAAN,KAAW5B,EAAMiI,KAAKiB,MACrBoB,IAGH,yCACA,kBAAChG,EAAA,EAAD,CAAM9D,KAAK,SACX,kBAACoJ,EAAA,EAAD,CACIC,YAAY,eACZC,OAAK,EACLC,WAAS,EACTC,QAASU,EACTxD,SAhJY,SAACH,EAAEyB,GAErB,IAAMmD,EAAgB3L,EAAM2K,UAAUnC,EAAKrB,OACrCwB,EAAU3I,EAAMiI,KACtBU,EAAQ4B,QAAQqB,KAAKD,GACrBA,EAAc/C,UAAY5I,EAAMiI,KAAKY,GACrC8C,EAAchD,QAAUA,EAGxB9I,QAAQC,IAAI,6BAA6B0I,EAAKrB,MAAOwE,GACrD3L,EAAMkI,eAAeyD,MAwInB,kBAACnK,EAAA,EAAD,CAAMC,QAAS,GACZ8I,GAEDvK,EAAMiI,KAAK6C,SAGT,kBAAC1J,EAAA,EAAD,CAAQC,QAAS,kBAAIrB,EAAM6L,gBAAgB7L,EAAMiI,KAAKY,MAAtD,yBAFA,K,kBC/CKiD,E,2MA5GbC,QAAU,SAAC7C,EAAKjB,GACd,OAAOiB,GAEL,IAAK,UACH,OAAO,kBAAC,EAAD,iBACOjB,EADP,CAEGrB,QAAS,EAAK5G,MAAM4G,QACpBvB,cAAe,EAAKrF,MAAMqF,cAC1B0F,cAAe,EAAK/K,MAAM+K,cAC1Bc,gBAAiB,EAAK7L,MAAM6L,gBAC5B3D,eAAgB,EAAKlI,MAAMkI,eAC3ByC,UAAW,EAAK3K,MAAM2K,aAGlC,IAAK,YACH,OAAO,kBAAC,EAAD,iBACO1C,EADP,CAEGwB,cAAe,EAAKzJ,MAAMyJ,cAC1B7C,QAAS,EAAK5G,MAAM4G,WAGhC,IAAK,WACH,OAAO,kBAAC,EAAD,iBACOqB,EADP,CAEGC,eAAgB,EAAKlI,MAAMkI,eAC3BG,oBAAqB,EAAKrI,MAAMqI,oBAChCmB,aAAc,EAAKxJ,MAAMwJ,aACzB5C,QAAS,EAAK5G,MAAM4G,QACpB8B,SAAU,EAAK1I,MAAM0I,YAGjC,IAAK,QACH,OAAO,kBAAC,EAAD,CACG1C,OAAQ,EAAKhG,MAAMgG,OACnBY,QAAS,EAAK5G,MAAM4G,QACpBzB,gBAAiB,EAAKnF,MAAMmF,gBAC5BE,cAAe,EAAKrF,MAAMqF,gBAGtC,IAAK,QACH,OAAO,kBAAC,EAAD,CACG+B,MAAO,EAAKpH,MAAMoH,MAClBR,QAAS,EAAK5G,MAAM4G,QACpBY,YAAa,EAAKxH,MAAMwH,cAEpC,QACE,OAAO,O,EAGbwE,YAAc,SAAC/D,GACb,OAAOA,EAAKiB,MAEV,IAAK,YAGL,IAAK,WACH,OAAOjB,EAAKA,KAAKzH,KAAKgG,QAExB,IAAK,UACH,OAAOyB,EAAKA,KAAKzH,KAEnB,IAAK,QACH,MAAO,UAAY,EAAKR,MAAMgG,OAAOnH,OAAS,IAEhD,IAAK,QACH,MAAO,UAAY,EAAKmB,MAAMoH,MAAMvI,OAAS,IAE/C,QACE,OAAOoJ,EAAKiB,O,EAGlB+C,UAAY,SAAChE,EAAK5I,GAEhB,IAAM6M,EAAO,EAAKH,QAAQ9D,EAAKiB,KAAKjB,GAC9BkE,EAAW,EAAKH,YAAY/D,GAmBlC,MAlBa,CACXmE,SACE,kBAACC,EAAA,EAAKC,KAAN,CAAWjG,IAAK4B,EAAKiB,KAAO,IAAMjB,EAAKY,GAAIxH,QAAS,kBAAI,EAAKrB,MAAMuM,WAAWlN,KAE1E4I,EAAKuE,OAAS,kBAAClI,EAAA,EAAD,CAAM9D,KAAK,YAAoB,GAE9C2L,EAEClE,EAAKuE,OAAS,GACd,4BAAQnL,QAAS,kBAAI,EAAKrB,MAAMyM,WAAWpN,KAA3C,MAINmN,OAAQvE,EAAKuE,OACbE,OAAQ,kBAAM,kBAACC,EAAA,EAAIC,KAAL,CAAU9C,MAAM,QACboC,M,wEAQnB,IADA,IAAMW,EAAQ,GACNxN,EAAI,EAAGA,EAAIU,KAAKC,MAAM6M,MAAMhO,OAAQQ,IAAI,CAC9C,IAAM6M,EAAOnM,KAAKkM,UAAUlM,KAAKC,MAAM6M,MAAMxN,GAAGA,GAChDwN,EAAMjB,KAAKM,GAEb,OACI,kBAACS,EAAA,EAAD,CAAKzL,MAAO,CAACS,MAAM,OAAOR,OAAO,OAAO2L,gBAAgB,aAAaC,UAAU,UAAWF,MAAOA,EAAOG,YAAajN,KAAKC,MAAMiN,iB,GAxGrHpL,aCHJqL,EALMC,IAAMC,cAAc,CACrCnM,MAAM,EACNmB,UAAW,eCgBf,SAASiL,EAAQrN,GAEf,IAAM2K,EAAY3K,EAAM2K,UAAUxK,KAAI,SAACyK,GACrC,OACE,yBAAKvE,IAAKuE,EAAS/B,GAAIvC,UAAU,SAC/B,kBAAC9E,EAAA,EAAD,CAAMiC,QAAM,EAACpC,QAAS,kBAAIrB,EAAM4G,QAAQ,WAAWgE,KACjD,kBAACpJ,EAAA,EAAKI,IAAN,CAAUH,QAAS,EAAIP,MAAO,CAACwC,QAAQ,MACnC,kBAAClC,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAClB,kBAAC,EAAD,CAAckG,KAAM+C,EAAS/C,OAC5B+C,EAASpK,KAAKgG,QAEM,IAAnBoE,EAASrB,MAAc,IAAM,IAGjC,kBAAC/H,EAAA,EAAKE,OAAN,CAAaC,MAAO,GACjBiJ,EAAStB,QAGd,kBAAC9H,EAAA,EAAKI,IAAN,CAAUH,QAAS,EAAGP,MAAO,CAACwC,QAAQ,MACpC,kBAAClC,EAAA,EAAKE,OAAN,CAAaC,MAAO,IAEfiJ,EAAShC,UACVgC,EAASjC,QAAQ2E,UADK,IAI1B,kBAAC9L,EAAA,EAAKE,OAAN,CAAaC,MAAO,GACjBiJ,EAASrB,OAEZ,kBAAC/H,EAAA,EAAKE,OAAN,CAAaC,MAAO,GACjBiJ,EAASlB,MAAM5F,iBAOxB4E,EAAW1I,EAAM0I,SAASvI,KAAI,SAACwI,GACnC,GAAGA,EAAQ4E,aAAe5E,EAAQmC,SAChC,OACE,kBAACtJ,EAAA,EAAKI,IAAN,CAAU0E,UAAU,QAAQ7E,QAAS,EAAG4E,IAAKsC,EAAQE,GAAIxH,QAAS,kBAAIrB,EAAM4G,QAAQ,UAAU+B,KAC5F,kBAACnH,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAAIgH,EAAQnI,MAChC,kBAACgB,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAAIgH,EAAQ4B,QAAQ1L,QACxC,kBAAC2C,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAAIgH,EAAQ9E,aAAhC,KACA,kBAACrC,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAAIgH,EAAQ6C,oBAChC,kBAAChK,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAAIgH,EAAQyC,gBAAhC,SAKFoC,EAAaxN,EAAMwN,WAAWrN,KAAI,SAACsN,GACvC,OACE,kBAACjM,EAAA,EAAKI,IAAN,CAAU0E,UAAU,QAAQ7E,QAAS,EAAG4E,IAAKoH,EAAU5E,IACrD,kBAACrH,EAAA,EAAKE,OAAN,CAAaL,QAAS,kBAAIrB,EAAM4G,QAAQ,YAAY6G,KACnDA,EAAUjN,KAAKgG,SAEhB,kBAAChF,EAAA,EAAKE,OAAN,CAAaL,QAAS,kBAAIrB,EAAM4G,QAAQ,YAAY6G,KACnDA,EAAU3E,QAEX,kBAACtH,EAAA,EAAKE,OAAN,KACE,4BAAQL,QAAS,kBAAIrB,EAAM0N,iBAAiBD,EAAU5E,MAAtD,UAKFgE,EAAQ,CACZ,CAAET,SAAW,kBAACC,EAAA,EAAKC,KAAN,CAAWpL,MAAO,CAACwC,QAAS,YAA5B,aACXgJ,OAAQ,kBAAM,kBAACC,EAAA,EAAIC,KAAL,CAAU1L,MAAO,CAACC,OAAQ,OAAOwM,UAAU,SAASb,gBAAgB,cAAenC,KACnG,CAAEyB,SAAW,kBAACC,EAAA,EAAKC,KAAN,CAAWpL,MAAO,CAACwC,QAAS,YAA5B,cACXgJ,OAAQ,kBAAM,kBAACC,EAAA,EAAIC,KAAL,CAAU1L,MAAO,CAACC,OAAQ,OAAOwM,UAAU,SAASb,gBAAgB,cAChE,kBAACtL,EAAA,EAAD,CAAMC,QAAS,GAAf,IAAoB+L,MACxC,CAAEpB,SAAW,kBAACC,EAAA,EAAKC,KAAN,CAAWpL,MAAO,CAACwC,QAAS,YAA5B,YACXgJ,OAAQ,kBACR,kBAACC,EAAA,EAAIC,KAAL,CAAU1L,MAAO,CAACC,OAAQ,OAAOwM,UAAU,SAASb,gBAAgB,cAClE,kBAACtL,EAAA,EAAD,CAAMC,QAAS,GACb,kBAACD,EAAA,EAAKI,IAAN,CAAUH,QAAS,GACjB,kBAACD,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAApB,QACA,kBAACH,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAAG,kBAAC2C,EAAA,EAAD,CAAM9D,KAAK,UAClC,kBAACgB,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAAG,kBAAC2C,EAAA,EAAD,CAAM9D,KAAK,UAClC,kBAACgB,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAAG,kBAAC2C,EAAA,EAAD,CAAM9D,KAAK,wBAClC,kBAACgB,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAAG,kBAAC2C,EAAA,EAAD,CAAM9D,KAAK,cAEnCkI,MAGP,CAAE0D,SAAW,kBAACC,EAAA,EAAKC,KAAN,CAAWpL,MAAO,CAACwC,QAAS,YAA5B,QACXgJ,OAAQ,kBAAM,kBAACC,EAAA,EAAIC,KAAL,CAAU1L,MAAO,CAACC,OAAQ,OAAOwM,UAAU,SAASb,gBAAgB,cAAc,kBAACtL,EAAA,EAAD,CAAMC,QAAS,GAAf,YAEpG,OACE,+BACE,yBAAKP,MAAO,CAAC4L,gBAAgB,QAAQ3L,OAAO,OAAOyM,WAAW,QAC5D,wBAAI1M,MAAO,CAACqD,MAAM,UAAlB,WAEF,kBAACoI,EAAA,EAAD,CAAKE,MAAOA,KAKHgB,MA7GQ,SAAC7N,GAEtB,OACE,kBAAC,EAAa8N,SAAd,MACG,gBAAE7M,EAAF,EAAEA,KAAKmB,EAAP,EAAOA,UAAP,OACC,kBAACiL,EAAD,iBAAarN,EAAb,CAAoBiB,KAAMA,EAAMmB,UAAWA,S,SC8CpC2L,E,YAvDX,aAAc,IAAD,8BACT,+CAMJ9M,KAAO,WACH,EAAKoB,SAAS,CACVpB,MAAM,KATD,EAYb+M,MAAQ,WACJ,EAAK3L,SAAS,CACVpB,MAAM,KAdD,EAiBbiG,SAAW,SAACH,GACR,EAAK1E,SAAS,CACV2C,KAAM+B,EAAE3B,OAAO+B,SAnBV,EAsBbL,SAAW,aApBP,EAAKnH,MAAQ,CACTsB,MAAM,EACN+D,KAAM,IAJD,E,sEA0BT,IAAMiJ,EAAWlO,KAAKC,MAAMiO,SAAS9N,KAAI,SAAC+N,GACtC,OACI,6BAAMA,EAAQpJ,OAAd,KAAwBoJ,EAAQlJ,SAGxC,OACI,yBAAK9D,MAAO,CAACqF,SAAS,UAAWD,UAAWvG,KAAKJ,MAAMsB,KAAO,uBAAwB,0BAClF,yBAAKC,MAAO,CAACiN,SAAS,QAAQxM,MAAM,SAEhC5B,KAAKJ,MAAMsB,KACX,kBAACG,EAAA,EAAD,CAAQC,QAAStB,KAAKiO,MAAO9M,MAAO,CAACkN,MAAM,OAAOD,SAAS,QAAQzK,QAAQ,QAA3E,KAEA,kBAACtC,EAAA,EAAD,CAAQC,QAAStB,KAAKkB,KAAMC,MAAO,CAACkN,MAAM,OAAOD,SAAS,QAAQzK,QAAQ,QAA1E,MAIC3D,KAAKJ,MAAMsB,KACZ,kBAAC,IAAMuC,SAAP,KACI,kBAAC6K,EAAA,EAAD,CAAMnN,MAAO,CAACC,OAAO,OAAOwC,UAAU,QAASgK,UAAU,SAAUnH,QAAQ,OAAO8H,cAAc,SAASC,eAAe,aACnHN,GAEL,kBAACvG,EAAA,EAAD,CAAOoC,OAAK,EAACD,YAAY,MAAM1C,MAAOpH,KAAKJ,MAAMqF,KAAMkC,SAAUnH,KAAKmH,YALvD,Q,GA3CjBrF,aCkDP2M,E,WApDX,WAAYhO,EAAKyB,EAAKE,EAAWD,EAAqBnB,EAAeiB,EAAkBkC,EAAWuK,EAAYC,GAAY,yBAe1HC,0BAA4B,SAAShE,EAAUjC,GAG3C,IAFA,IAAIkG,EAAgB,EAChBC,EAAc,EACVxP,EAAI,EAAGA,EAAIsL,EAAU9L,OAAQQ,IACjCuP,GAAejE,EAAUtL,GAAG2J,OAEhC,IAAI,IAAI3J,EAAI,EAAGA,EAAIqJ,EAAS7J,OAAQQ,IAChC,GAAGqJ,EAASrJ,GAAGyL,SAAS,CACpB,IAAMZ,EAASxB,EAASrJ,GAAG6K,OACrB4E,EAAUpG,EAASrJ,GAAGgM,4BAC5BwD,GAAcnQ,KAAKC,MAAMuL,EAAO4E,GAIxC,IAAMC,EAAWpE,EAAU9L,OAASkB,KAAKiC,iBACnCgN,EAAkBtQ,KAAKC,MAAMiQ,EAAc,IACjD7O,KAAKmC,oBAAsB8M,EAAkBtQ,KAAKC,MAAMoQ,EAAS,IACjEhP,KAAKgB,cAAgBrC,KAAKC,MAAMkQ,IA/BhChP,QAAQC,IAAI,kBACZC,KAAKS,KAAOA,GAAc,aAC1BT,KAAKkC,IAAMA,GAAY,IACvBlC,KAAKoC,UAAYA,GAAwB,IACzCpC,KAAKmC,oBAAsBA,GAA4C,IACvEnC,KAAKgB,cAAgBA,GAAgC,IACrDhB,KAAKkP,kBAAoB,EACzBlP,KAAKiC,iBAAmBA,GAAsC,EAC9DjC,KAAKmE,UAAYA,IAAuB,IAAIgL,MAAOC,cAAgB,EACnEpP,KAAK0O,WAAaA,GAA0B,GAC5C1O,KAAK2O,WAAaA,GAA0B,EAC5C3O,KAAKqP,kBAAoB,E,mDAsBtB9L,GACCA,EAKAvD,KAAKkC,IAAMlC,KAAKkC,IAAMqB,EAASvD,KAAKmC,oBAHpCnC,KAAKsP,e,4EASG1G,GACZ5I,KAAKqP,mBAAqB,M,KC7ClC,SAASE,IACLvP,KAAKwP,MAAQ,CAAC,UAAU,SAAS,MAAM,WACvCxP,KAAKH,QAAU,IAAItB,EAGvBgR,EAAa/Q,UAAUiR,qBAAuB,SAASC,GACnD,IAAMjP,EAAOT,KAAK2P,mBAGlB,OADe,IAAIlB,EAAOhO,IAI9B8O,EAAa/Q,UAAUmR,iBAAmB,WACtC,IAEMC,EAAIjR,KAAKE,SACTgR,EAAQ7P,KAAKH,QAAQpB,gBAHR,CAAC,UAAW,aAAa,WAAW,aAIjDqR,EAAS9P,KAAKH,QAAQpB,gBAHR,CAAC,UAAW,WAAY,eAAe,cAI3D,OAAGmR,EAAI,GACIC,EAAQ,IAAMC,EAEdA,EAAS,IAAMD,GAIfN,QCkDAxH,E,WA7EX,WAAYe,EAAIrI,EAAKqH,EAAMiI,EAAOC,EAAIxG,EAAOD,EAAM0G,EAAMlH,EAAQO,EAAUK,EAAOV,EAAOL,GAAS,oBAC9F5I,KAAK8I,GAAKA,EACV9I,KAAKS,KAAOA,EACZT,KAAK8H,KAAOA,EACZ9H,KAAK+P,OAASA,EACd/P,KAAKgQ,IAAMA,EACXhQ,KAAKwJ,MAAQA,EACbxJ,KAAKuJ,MAAQA,EACbvJ,KAAKiQ,MAAQA,EACbjQ,KAAK+I,OAASA,EACd/I,KAAKsJ,SAAWA,EAChBtJ,KAAK2J,MAAQA,EACb3J,KAAKiJ,OAASA,EACdjJ,KAAKkQ,MAAO,EACZlQ,KAAK4I,QAAUA,EACf5I,KAAK6I,UAAYD,EAAUA,EAAQE,GAAK,KACxC9I,KAAK4J,MAAQ,KACb5J,KAAKmQ,SAAW,EAChBnQ,KAAKmQ,SAAW,G,qDAGhBrQ,QAAQC,IAAI,sBACZ,IAAM6P,EAAIjR,KAAKE,SACZ+Q,EAAI,GACH5P,KAAK2J,MAAM5F,WAAa,EACjB6L,EAAI,KACX5P,KAAK2J,MAAM5F,WAAa,GAEjBpF,KAAKE,SACR,GACJmB,KAAK2J,MAAM7F,cAAgB,EACpB8L,EAAI,KACX5P,KAAK2J,MAAM7F,cAAgB,IAE5B9D,KAAK2J,MAAM5F,UAAY,GAAK/D,KAAKmQ,SAAW,KAC3CnQ,KAAKkQ,MAAO,K,gCAIhBlQ,KAAKwJ,OAAS,EAEdxJ,KAAK2J,MAAM5F,UAAY/D,KAAK2J,MAAM5F,UAAY,IAAM,IAAM,IAAM/D,KAAK2J,MAAM5F,UAAY,GACvF/D,KAAK2J,MAAM7F,aAAe9D,KAAK2J,MAAM7F,aAAe,GAAK,GAAK,GAAK9D,KAAK2J,MAAM7F,aAAe,I,+BAG7F9D,KAAKwJ,OAAS,EAEdxJ,KAAK2J,MAAM5F,UAAY/D,KAAK2J,MAAM5F,UAAY,IAAM,EAAI,EAAI/D,KAAK2J,MAAM5F,UAAY,GACnF/D,KAAK2J,MAAM7F,aAAe9D,KAAK2J,MAAM7F,aAAe,GAAK,EAAI,EAAI9D,KAAK2J,MAAM7F,aAAe,I,oCAG3F9D,KAAKiJ,QAAU,IAEfjJ,KAAK2J,MAAM5F,UAAY/D,KAAK2J,MAAM5F,UAAY,IAAM,IAAM,IAAM/D,KAAK2J,MAAM5F,UAAY,GACvF/D,KAAK2J,MAAM7F,aAAe9D,KAAK2J,MAAM7F,aAAe,GAAK,GAAK,GAAK9D,KAAK2J,MAAM7F,aAAe,I,oCAG7F9D,KAAKiJ,QAAU,IAEfjJ,KAAK2J,MAAM5F,UAAY/D,KAAK2J,MAAM5F,UAAY,IAAM,EAAI,EAAI/D,KAAK2J,MAAM5F,UAAY,GACnF/D,KAAK2J,MAAM7F,aAAe9D,KAAK2J,MAAM7F,aAAe,GAAK,EAAI,EAAI9D,KAAK2J,MAAM7F,aAAe,I,mCAElFsM,M,kCAITtQ,QAAQC,IAAI,iBACZD,QAAQC,IAAIC,KAAKS,MACjBX,QAAQC,IAAI,UAAUC,KAAK+P,QAC3BjQ,QAAQC,IAAI,OAAOC,KAAKgQ,KACxBlQ,QAAQC,IAAI,SAASC,KAAKwJ,OAC1B1J,QAAQC,IAAI,MAAOC,KAAKqQ,KACxBvQ,QAAQC,IAAI,SAAUC,KAAK2J,OAC3B7J,QAAQC,IAAI,SAAU,IAAKC,KAAKiJ,Y,KCvDzBqH,MAnBf,SAAgCzF,EAASjC,GAGrC,IAFA,IAAI2H,EAAa,EACXC,EAAiBC,OAAOC,KAAK7F,EAASvB,UACpChK,EAAI,EAAGA,EAAIkR,EAAe1R,OAAQQ,IACtC,IACOsJ,EAAQyB,aAAaD,SAASuG,SAASH,EAAelR,MACrDiR,GAAY,GAEb3H,EAAQyB,aAAaE,SAASoG,SAASH,EAAelR,MACrDiR,GAAY,IAEnB,MAAMvJ,GACH,OAAO,EAIf,OAAOuJ,GCbX,SAASK,IACL5Q,KAAK6Q,WAAa,UAClB7Q,KAAK8Q,WAAa,EAClB9Q,KAAK+Q,eAAiB,EACtB/Q,KAAKgR,UAAY,GACjBhR,KAAKiR,YAAc,CAAC,iBACpBjR,KAAKkR,UAAY,CAAC,eAClBlR,KAAKmR,aAAe,CAAC,eAGzBP,EAAepS,UAAU4S,uBAAyB,SAASC,EAAcC,EAAYC,GACjFzR,QAAQC,IAAI,8BACZD,QAAQC,IAAIwR,GAEZA,EAAgBA,EAAcrL,QAAO,SAAC0C,GAAD,OAAYA,EAAQmC,YAQzD,IAPA,IAAMlH,EAAgB,CACEC,aAAc,EACdC,UAAW,EACXkF,OAAQ,GAE1BuI,EAAiB,GAEflS,EAAI,EAAGA,EAAIgS,EAAYhS,IAAI,CAC/B,IAAMuL,EAAW7K,KAAKyR,wBAAuB,EAAM,KAAK,GACxD5N,EAAcC,cAAgB+G,EAASlB,MAAM7F,aAC7CD,EAAcE,WAAa8G,EAASlB,MAAM5F,UAC1CF,EAAcoF,QAAU4B,EAAS5B,OACjCuI,EAAe3F,KAAKhB,GAGxB,IAAI,IAAIvL,EAAI,EAAGA,EAAI+R,EAAc/R,IAAI,CAGjC,IAAMsJ,EAAU5I,KAAK0R,gBAAgBH,GAE/B1G,EAAW7K,KAAKyR,wBAAuB,EAAM7I,GACnD/E,EAAcC,cAAgB+G,EAASlB,MAAM7F,aAC7CD,EAAcE,WAAa8G,EAASlB,MAAM5F,UAC1CF,EAAcoF,QAAU4B,EAAS5B,OACjC,IAAMW,EAAQ0G,EAAuBzF,EAASjC,GAC9CiC,EAASjB,MAAQA,EAEjBhB,EAAQ4B,QAAQqB,KAAKhB,GACrBjC,EAAQ+I,wBAERH,EAAe3F,KAAKhB,GAGxB,IAAI,IAAIvL,KAAKuE,EACTA,EAAcvE,GAAKX,KAAKC,MAAMiF,EAAcvE,GAAI+R,GAEpD,MAAO,CACHzG,UAAW4G,EACX3N,cAAeA,EACf0N,cAAeA,IAIvBX,EAAepS,UAAUoT,mBAAqB,WAC1C,IAAM9I,EAAK9I,KAAK6Q,WAEhB,OADA7Q,KAAK6Q,YAAc,EACZ/H,GAGX8H,EAAepS,UAAUiT,uBAAyB,SAAS/D,EAAW9E,EAASiJ,GAG3E,IAAM/I,EAAM4E,EAAwC,KAA5B1N,KAAK4R,qBAEvB7B,EAAS/P,KAAK8R,eACdhK,EAAkB,SAAXiI,EAAoB/P,KAAK0R,gBAAgB1R,KAAKkR,WAAwB,WAAXnB,EAAsB/P,KAAK0R,gBAAgB1R,KAAKiR,aAAejR,KAAK0R,gBAAgB1R,KAAKmR,cAC3J1Q,EAAOT,KAAK+R,WAAWhC,GACvBC,EAAMhQ,KAAKgS,kBAAkB,GAAG,IAEhCC,EAAWjS,KAAK+Q,gBAAkB,EAAI,EAAI,EAC1CvH,EAAQqI,GAAgC7R,KAAKgS,kBAAkB,EAAEC,GAC1D,IAAVzI,IACCxJ,KAAK+Q,gBAAgB,GAKzB,IAAMzH,EAAWtJ,KAAKkS,eAAe1I,GAC/BG,EAAQ3J,KAAKmS,cACblJ,EAAiD,IAAxCjJ,KAAKgS,kBAAkB,EAAE,EAAS,EAANxI,GAG3C,OADiB,IAAIzB,EAASe,EAAGrI,EAAKqH,EAAKiI,EAAOC,EAAIxG,EAAMF,EAASC,MAAMD,EAAS2G,MAAM3G,EAASP,OAAQO,EAAS8I,SAASzI,EAAOV,EAAOL,IAI/IgI,EAAepS,UAAU0T,eAAiB,SAAS1I,GAmB/C,IAjBA,IAAM6I,EAAY,CACdC,GAAI,CAAC,mBAAmB,cAAc,eACtCC,SAAU,CAAC,kBAAkB,eAAe,mBAC5CC,QAAS,CAAC,iBAAiB,cAAc,kBACzCC,YAAa,CAAC,kBAAkB,eAAe,mBAC/CC,WAAY,CAAC,MAAM,MAAM,QAGvBC,EAAQlC,OAAOC,KAAK2B,GAGpBO,EAAqB,IAAVpJ,EAAc,aAAexJ,KAAK0R,gBAAgBiB,GAC7DE,EAAW7S,KAAK0R,gBAAgBiB,GAEhCG,EAAkB9S,KAAK+S,aAAaH,EAASC,GAC7C9J,EAAS,GACTqJ,EAAW,GACT9S,EAAI,EAAGA,EAAIwT,EAAgBhU,OAAQQ,IAEpCA,GAAG,GACFyJ,EAAO8C,KAAKiH,EAAgBxT,IAGhC8S,EAASU,EAAgBxT,IAAMU,KAAKgS,kBAAkB,EAAE,EAAExI,GAI9D,MAAO,CACHyG,MAAO2C,EACP7J,OAAQA,EACRqJ,SAAUA,EACV7I,MALoB,IAAVC,EAAcxJ,KAAK0R,gBAAgBW,EAAUO,IAAaP,EAAUO,GAAUpJ,EAAM,KAStGoH,EAAepS,UAAUuU,aAAe,SAASH,EAASC,GACtD,IAAM9J,EAAS,CACXuJ,GAAI,CAAC,SAAS,MAAM,eACpBC,SAAU,CAAC,MAAM,OAAQ,SAAS,cAClCC,QAAS,CAAC,aAAa,UAAU,SAAS,OAC1CC,YAAa,CAAC,SAAS,aAAa,cACpCC,WAAY,CAAC,QAAQ,SAAS,eAE9BpJ,EAAW,GASf,OARGsJ,IAAaC,GACZvJ,EAASuC,KAAK9C,EAAO6J,GAAU,IAC/BtJ,EAASuC,KAAK9C,EAAO6J,GAAU,IAC/BtJ,EAASuC,KAAK9C,EAAO6J,GAAU,IAC/BtJ,EAASuC,KAAK9C,EAAO8J,GAAU,KAE/BvJ,EAAWP,EAAO6J,GAEftJ,GAGXsH,EAAepS,UAAU2T,YAAc,WASnC,MARc,CACVrO,aAAc9D,KAAKgS,kBAAkB,EAAE,KACvCjO,UAAW/D,KAAKgS,kBAAkB,EAAE,KACpCgB,WAAYhT,KAAKgS,kBAAkB,EAAE,KACrCiB,SAAUjT,KAAKgS,kBAAkB,EAAE,KACnCkB,UAAWlT,KAAKgS,kBAAkB,EAAE,KACpCmB,WAAYnT,KAAKgS,kBAAkB,EAAE,OAK7CpB,EAAepS,UAAUsT,aAAe,WAGpC,OADe9R,KAAK0R,gBADJ,CAAC,OAAQ,SAAU,aAKvCd,EAAepS,UAAUuT,WAAa,SAAShC,GAC3C,IAGIqD,EAHEC,EAAkB,CAAC,QAAQ,SAAS,SAAS,OAAO,QAAQ,OAAO,OAAO,OAAO,WAAW,QAC5FC,EAAoB,CAAC,OAAO,QAAQ,QAAQ,MAAM,OAAO,QAAQ,QAAQ,SAAS,SAAS,SAAS,SAG1G,GAAc,SAAXvD,EACCqD,EAAapT,KAAK0R,gBAAgB2B,QAC/B,GAAe,WAAXtD,EACPqD,EAAapT,KAAK0R,gBAAgB4B,OAC/B,CACH,IAAMC,EAAUF,EAAgBG,OAAOF,GACvCF,EAAapT,KAAK0R,gBAAgB6B,GAEtC,IAAME,EAAWzT,KAAK0R,gBAVH,CAAC,QAAQ,OAAO,QAAQ,UAAU,QAAQ,UAAU,OAAO,QAAQ,QAAQ,OAAO,OAAO,MAAM,OAAO,OAAO,MAAM,WAAW,SAAS,MAAM,SAWhK,MAAO,CACC7B,MAAMuD,EACNM,KAAMD,EACN7S,KAAKwS,EAAa,IAAMK,EACxBhN,QAAS2M,EAAWO,OAAO,GAAK,KAAOF,EACvCG,MAAOR,EAAa,IAAMK,EAASE,OAAO,GAAK,IAC/C/O,MAAOwO,EAAWO,OAAO,GAAKF,EAAW,MAIrD7C,EAAepS,UAAUkT,gBAAkB,SAAShT,GAChD,OAAOA,EAAIC,KAAKC,MAAMD,KAAKE,SAASH,EAAII,UAG5C8R,EAAepS,UAAUwT,kBAAoB,SAAShT,EAAMC,GACxD,OAAON,KAAKC,MAAMD,KAAKE,UAAUI,EAAID,IAAUA,GAGpC4R,QChLAiD,E,WAvBX,WAAYpT,EAAM8M,EAAW5B,EAAQ7D,EAAMnH,GAAK,oBAC5CX,KAAKS,KAAOA,EACZT,KAAKuN,UAAYA,EACjBvN,KAAK2L,OAASA,EACd3L,KAAK8H,KAAOA,EACZ9H,KAAK8T,cAAgB,KACrB9T,KAAKqP,kBAAoB,EACzBrP,KAAKwL,aAAe,GACpBxL,KAAKkQ,MAAO,EACZlQ,KAAKW,IAAMA,E,8DAGXX,KAAKqP,mBAAoB,EACzBrP,KAAK8T,cAAgB,O,sCAGrB9T,KAAK8T,cAAgB,KACI,IAAtB9T,KAAKwL,eACJxL,KAAKkQ,MAAO,O,KCfxB,SAAS6D,IACL/T,KAAKgR,UAAY,GACjBhR,KAAKwP,MAAQ,CAAC,mBAAmB,aAAa,iBAAiB,iBAAiB,SAClE,eAAgB,WAAY,eAE1CxP,KAAKgU,eAAiB,IAAIpD,EAG9BmD,EAAcvV,UAAUyV,sBAAwB,WAC5C,IAAMC,EAAUzD,OAAOC,KAAK1Q,KAAKmU,gBAC3BxI,EAAS3L,KAAK0R,gBAAgBwC,GAC9BpM,EAAO9H,KAAK0R,gBAAgB1R,KAAKwP,OACjC4E,EAAQpU,KAAKqU,oBACb1T,EAAMX,KAAKgU,eAAevC,wBAAuB,EAAM,MAE7D,OADgB,IAAIoC,EAAQO,EAAM3T,KAAM2T,EAAM7G,UAAU5B,EAAO7D,EAAKnH,IAIxEoT,EAAcvV,UAAU6V,kBAAoB,WACxC,IAEMzE,EAAIjR,KAAKE,SACTgR,EAAQ7P,KAAK0R,gBAHA,CAAC,UAAW,aAAc,WAIvC5B,EAAS9P,KAAK0R,gBAHA,CAAC,UAAW,WAAY,iBAW5C,MAAO,CACHjR,KANDmP,EAAI,GACIC,EAAQ,IAAMC,EAEdA,EAAS,IAAMD,EAItBtC,UATUsC,EAAM,GAAKC,EAAO,KAapCiE,EAAcvV,UAAU2V,eAAiB,CACrC,WAAc,CACVG,QAAS,EACTC,QAAS,EACTC,UAAW,EACXC,UAAW,EACXC,WAAY,GACZC,YAAa,IAEjB,QAAW,CACPL,QAAS,EACTC,QAAS,GACTC,UAAW,EACXC,UAAW,EACXC,WAAY,GACZC,YAAa,IAEjB,QAAW,CACPL,QAAS,EACTC,QAAS,EACTC,UAAW,EACXC,UAAW,EACXC,WAAY,GACZC,YAAa,IAEjB,iBAAkB,CACdL,QAAS,EACTC,QAAS,EACTC,UAAW,EACXC,UAAW,EACXC,WAAY,GACZC,YAAa,KAIrBZ,EAAcvV,UAAUkT,gBAAkB,SAAShT,GAC/C,OAAOA,EAAIC,KAAKC,MAAMD,KAAKE,SAASH,EAAII,UAG7BiV,SCMA7J,G,WApFX,WAAYpB,EAAI8L,EAASnU,EAAM8M,EAAW5B,EAAOxC,EAAM4B,EAAUV,EAAaF,EAAQmB,EAA4BC,EAAaF,GAAiB,oBAC5IrL,KAAK8I,GAAKA,EACV9I,KAAK4U,QAAUA,EACf5U,KAAKS,KAAOA,EACZT,KAAKuN,UAAYA,EACjBvN,KAAK2L,OAASA,EACd3L,KAAKmJ,KAAOA,EACZnJ,KAAK+K,SAAWA,EAChB/K,KAAKwN,YAAczC,EACnB/K,KAAKqK,aAAeA,EACpBrK,KAAKmK,OAASA,EACdnK,KAAK6U,UAAY,EACjB7U,KAAK0L,mBAAoB,EACzB1L,KAAKsL,4BAA8BA,EACnCtL,KAAKyL,mBAAqBH,EAC1BtL,KAAKuL,aAAeA,GAA8B,EAClDvL,KAAKqL,gBAAkBA,GAAoC,EAC3DrL,KAAK8U,QAAS,EACd9U,KAAKwK,QAAU,GACfxK,KAAK8D,aAAe,EACpB9D,KAAK+U,UAAW,EAChB/U,KAAKwL,aAAe,KAAKxL,KAAKsL,4BAA4BtL,KAAKuL,c,qDAG/DzL,QAAQC,IAAI,qBACZ,IAAIiV,EAAU,EAyBd,OAxBAlV,QAAQC,IAAI,iBAAiBC,KAAKuL,cAClCvL,KAAKuL,cAAgB,EACrBvL,KAAK2R,wBACL7R,QAAQC,IAAIC,KAAKqL,iBACdrL,KAAKuL,cAAgBvL,KAAKsL,6BAA+BtL,KAAKqL,iBAAmB,IACpD,MAAzBrL,KAAKqL,iBACJvL,QAAQC,IAAI,oBACZC,KAAK+U,UAAW,EAEZC,EADDhV,KAAK0L,kBACM/M,KAAKC,MAAMoB,KAAKmK,OAAOnK,KAAKsL,6BAE5BtL,KAAKmK,SAGnBrK,QAAQC,IAAI,8BACZC,KAAKwL,cAAgB,IAGtBxL,KAAK0L,oBACJ5L,QAAQC,IAAI,2BACZiV,EAAUrW,KAAKC,MAAMoB,KAAKmK,OAAOnK,KAAKsL,6BACtCtL,KAAKwL,cAAgB,GAGtBwJ,I,gCAEDvK,GACNzK,KAAKwK,QAAQqB,KAAKpB,GAClBzK,KAAK2R,0B,mCAEIlH,GACTzK,KAAKwK,QAAQtE,QAAO,SAAC+O,GAAD,OAAOxK,EAAO3B,KAAOmM,EAAEnM,MAC3C9I,KAAK2R,0B,8CAIL,IADA,IAAI7N,EAAe,EACXxE,EAAI,EAAGA,EAAIU,KAAKwK,QAAQ1L,OAAQQ,IACpCwE,GAAgB9D,KAAKwK,QAAQlL,GAAGqK,MAAM7F,aAAa,GAAK9D,KAAKwK,QAAQlL,GAAGsK,MAE5E9F,EAAenF,KAAKC,MAAMkF,EAAa9D,KAAKwK,QAAQ1L,QACpDkB,KAAKqL,gBAAkBrL,KAAKqL,gBAAkBvH,EAC9C9D,KAAK8D,aAAeA,EACpB,IAAMgR,GAAU9U,KAAKsL,4BAA4BtL,KAAKuL,cAAczH,EACpEhE,QAAQC,IAAI,eAAe+U,GAC3B9U,KAAK8U,OAASA,I,kCAGdhV,QAAQC,IAAI,gBACZD,QAAQC,IAAIC,KAAK4U,SACjB9U,QAAQC,IAAIC,KAAKS,MACjBX,QAAQC,IAAI,SAASC,KAAK2L,QAC1B7L,QAAQC,IAAI,OAAOC,KAAKmJ,MACxBrJ,QAAQC,IAAI,eAAeC,KAAKqK,cAChCvK,QAAQC,IAAI,SAASC,KAAKmK,QAC1BrK,QAAQC,IAAI,8BAA8BC,KAAKsL,iC,KC/EvD,SAAS4J,KACLlV,KAAK6I,UAAY,IAGrBqM,GAAc1W,UAAU2W,sBAAwB,SAASP,EAASQ,GAG9D,IAAMtM,EAAK9I,KAAK6I,UAChB7I,KAAK6I,WAAa,EAClB,IAAMqL,EAAUzD,OAAOC,KAAK1Q,KAAKmU,gBAC3BxI,EAAS3L,KAAK0R,gBAAgBwC,GAC9BmB,EAAQ5E,OAAOC,KAAK1Q,KAAKsV,cACzBnM,EAAOnJ,KAAK0R,gBAAgB2D,GAC5B5U,EAAOmU,EAAQnU,KAAO,IAAM0I,EAC5BoE,EAAYqH,EAAQrH,UAAY,IAAMpE,EACtCkB,EAAerK,KAAKsV,aAAanM,GACjCmC,EAA8B8J,EAAiBpV,KAAKgS,kBAAkB,EAAE,GAAIhS,KAAKgS,kBAAkB,EAAE,IACrGzG,EAAe6J,EAAiBzW,KAAKC,MAAMoB,KAAKgS,kBAAkB,EAAE1G,EAA4B,IAAK,EACrGD,EAAkB1M,KAAKC,MAAM2M,EAAaD,EAA4B,KACtEnB,EAASnK,KAAKgS,kBAAkB,EAAE,KAGxC,OADgB,IAAI9H,GAAQpB,EAAI8L,EAASnU,EAAK8M,EAAW5B,EAAOxC,EAAMiM,EAAgB/K,EADtD,IAATF,EAC6FmB,EAA4BC,EAAaF,IAIjK6J,GAAc1W,UAAU2V,eAAiB,CACrC,WAAc,CACVG,QAAS,EACTC,QAAS,EACTC,UAAW,EACXC,UAAW,EACXC,WAAY,GACZC,YAAa,IAEjB,QAAW,CACPL,QAAS,EACTC,QAAS,GACTC,UAAW,EACXC,UAAW,EACXC,WAAY,GACZC,YAAa,IAEjB,QAAW,CACPL,QAAS,EACTC,QAAS,EACTC,UAAW,EACXC,UAAW,EACXC,WAAY,GACZC,YAAa,IAEjB,iBAAkB,CACdL,QAAS,EACTC,QAAS,EACTC,UAAW,EACXC,UAAW,EACXC,WAAY,GACZC,YAAa,KAIrBO,GAAc1W,UAAU8W,aAAe,CACnC,QAAW,CACPlL,SAAS,CAAC,OAAO,MAAM,cACvBG,SAAS,CAAC,WAEd,UAAW,CACPH,SAAU,CAAC,OAAO,MAAM,cACxBG,SAAS,CAAC,WAEd,aAAc,CACVH,SAAU,CAAC,OAAO,MAAM,cACxBG,SAAU,CAAC,WAEf,gBAAiB,CACbH,SAAS,CAAC,SAAS,MAAM,cACzBG,SAAU,CAAC,YAInB2K,GAAc1W,UAAUkT,gBAAkB,SAAShT,GAC/C,OAAOA,EAAIC,KAAKC,MAAMD,KAAKE,SAASH,EAAII,UAG5CoW,GAAc1W,UAAUwT,kBAAoB,SAAShT,EAAMC,GACvD,OAAON,KAAKC,MAAMD,KAAKE,UAAUI,EAAID,IAAUA,GAGpCkW,UCtFf,SAASK,KACLvV,KAAKG,QAAU,GACfH,KAAKa,YAAc,GACnBb,KAAKwV,iBAAmB,EACxBxV,KAAKyV,eAAiB,EACtBzV,KAAK0V,cAAgB,IAAI3B,GACzB/T,KAAK2V,aAAe,IAAIpG,EACxBvP,KAAK4V,cAAgB,IAAIV,GACzBlV,KAAK6V,QAGTN,GAAS/W,UAAUqX,MAAQ,WACvB,IAAI,IAAIvW,EAAG,EAAGA,EAAIU,KAAKwV,iBAAkBlW,IAAI,CACzC,IAAMwB,EAAad,KAAK2V,aAAalG,uBACrCzP,KAAKa,YAAYgL,KAAK/K,GAE1B,IAAI,IAAIxB,EAAG,EAAGA,EAAIU,KAAKwV,iBAAkBlW,IAAI,CACzC,IAAMe,EAASL,KAAK0V,cAAczB,wBAClCjU,KAAKG,QAAQ0L,KAAKxL,KAG1BkV,GAAS/W,UAAUsX,cAAgB,WAC/B,IAAI,IAAIxW,EAAI,EAAGA,EAAIU,KAAKa,YAAY/B,OAAQQ,OAKhDiW,GAAS/W,UAAUkK,WAAa,SAAS0M,GACrC,IACI/U,EAQJ,OATU1B,KAAKE,SAER,KAAOmB,KAAKa,YAAY/B,QAC3BuB,EAASL,KAAK0V,cAAczB,wBAC5BjU,KAAKG,QAAQ0L,KAAKxL,IAElBA,EAASL,KAAKG,QAAQxB,KAAKC,MAAMD,KAAKE,SAASmB,KAAKG,QAAQrB,SAEhDkB,KAAK4V,cAAcT,sBAAsB9U,EAAO+U,IAIrDG,UC1Cf,SAASQ,KACLjW,QAAQC,IAAI,wBACZC,KAAKqH,MAAQ,CAAC,kBAGlB0O,GAAYvX,UAAUyI,QAAU,SAASK,GAGrC,OAFAxH,QAAQC,IAAI,eACZC,KAAKqH,MAAMwE,KAAKvE,GACTtH,KAAKqH,OAGhB0O,GAAYvX,UAAUwX,WAAa,SAAS1W,GAGxC,OAFAQ,QAAQC,IAAI,iBACZC,KAAKqH,MAAM4O,OAAO3W,EAAE,GACbU,KAAKqH,OAGD0O,UCjBf,SAASG,KACLlW,KAAKH,QAAU,IAAItB,EAGvB2X,GAAY1X,UAAU2X,oBAAsB,SAASC,EAAKC,EAAUC,GAEhE,IAAM1G,EAAIjR,KAAKE,SACf,OAAG+Q,EAAI,GACAwG,EAAKzM,MAAM5F,UAAY,IAAMqS,EAAKzM,MAAM5F,UAAY,GAC5C/D,KAAKuW,UAAUH,GAEnBC,EAAU1M,MAAM5F,UAAY,GAEpB/D,KAAKwW,WAAWH,GAChBA,EAAU1M,MAAM5F,UAAY,GAC5B/D,KAAKyW,eAAeJ,EAAUC,GAE9BtW,KAAK0W,aAAaL,GAI1BrW,KAAK2W,cAAc,KAAKN,EAAUC,IAMjDJ,GAAY1X,UAAUmY,cAAgB,SAASxN,EAAKkN,EAAUC,GAC1D,IAAIrR,EAEAF,EAASsR,EAEPrR,GAAQ,IAAImK,MAAOyH,iBACzB,OAAOzN,GAEH,IAAK,QACDlE,EAAO,sFACP,MAEJ,IAAK,YACD,OAAOjF,KAAK6W,eAAeR,GAE/B,IAAK,UACD,OAAOrW,KAAK8W,aAAaT,EAAUC,GAEvC,IAAK,WACD,OAAOtW,KAAK+W,cAAcV,EAAUC,GAExC,IAAK,UACD,OAAOtW,KAAKgX,aAAaX,GAE7B,IAAK,OACD,OAAOrW,KAAKiX,UAAUZ,GAE1B,QACI,OAAOrW,KAAKkX,UAAUb,GAS9B,MAPc,CACVxR,QA7BU,QA8BVI,KAAMA,EACNF,OAAQA,EACRC,KAAMA,EACNmB,MAAM,IAKd+P,GAAY1X,UAAU0Y,UAAY,SAASrM,GACvC,IAAMsM,EAAc,CAAC,qBAAuBtM,EAASpK,KAAKoP,MAAM,qBAC1DuH,EAAW,CAAC,aAAevM,EAASpK,KAAKgG,QAAU,eAAe,4CAQxE,MAPc,CACV5B,QAAS7E,KAAKH,QAAQpB,gBAAgB0Y,GACtClS,KAAMjF,KAAKH,QAAQpB,gBAAgB2Y,GACnCrS,OAAQ8F,EACR7F,MAAM,IAAImK,MAAOyH,iBACjBzQ,MAAM,IAKd+P,GAAY1X,UAAUkY,aAAe,SAAS7L,GAW1C,MARc,CACVhG,QAAS7E,KAAKH,QAAQpB,gBAHH,CAAC,UAAU,cAAc,mBAI5CwG,KAAMjF,KAAKH,QAAQpB,gBAHH,CAAC,qCAAqC,yBAItDsG,OAAQ8F,EACR7F,MAAM,IAAImK,MAAOyH,iBACjBzQ,MAAM,EACNZ,QAAQ,IAKhB2Q,GAAY1X,UAAUiY,eAAiB,SAASJ,EAAWC,GACvD,IACMe,EAAgB,CAAC,gCAAkCf,EAAU7V,KAAKG,KAAO,uBAU/E,MARc,CACViE,QAAS7E,KAAKH,QAAQpB,gBAJD,CAAC,cAAe,gBAAiB,oBAKtDwG,KAAMjF,KAAKH,QAAQpB,gBAAgB4Y,GACnCtS,OAAQsR,EACRrR,MAAM,IAAImK,MAAOyH,iBACjBzQ,MAAM,EACNZ,QAAQ,IAKhB2Q,GAAY1X,UAAUqY,eAAiB,SAAShM,GAC5C,IACMyM,EAAgB,CAClB,qBAAuBzM,EAASpK,KAAKgG,QAAU,+GAC/C,sFACA,mHAYJ,MAVc,CACV5B,QAAS7E,KAAKH,QAAQpB,gBAPD,CAAC,cAAe,gBAAgB,mBAAmB,iBAQxEwG,KAAMjF,KAAKH,QAAQpB,gBAAgB6Y,GACnCvS,OAAQ8F,EACR7F,MAAM,IAAImK,MAAOyH,iBACjBzQ,MAAM,EACNhB,UAAU,EACVI,QAAQ,EACRF,OAAQwF,IAKhBqL,GAAY1X,UAAUsY,aAAe,SAASlO,GAU1C,MATc,CACV/D,QAAS,mBAAqB+D,EAAQgM,QAAQnU,KAC9CwE,KAAM,0DAA4D2D,EAAQO,KAAO,QAASP,EAAQgM,QAAQnU,KAAO,IACjHsE,OAAQ6D,EAAQgM,QAAQjU,IACxBqE,MAAM,IAAImK,MAAOyH,iBACjBzQ,MAAM,EACNhB,UAAU,EACVE,OAAQuD,IAKhBsN,GAAY1X,UAAUuY,cAAgB,SAASnO,GAU3C,MATc,CACV/D,QAAS,wBAA0B+D,EAAQgM,QAAQnU,KACnDwE,KAAM,oCAAsC2D,EAAQO,KAAO,QAASP,EAAQgM,QAAQnU,KAAO,IAC3FsE,OAAQ6D,EAAQgM,QAAQjU,IACxBqE,MAAM,IAAImK,MAAOyH,iBACjBzQ,MAAM,EACNhB,UAAU,EACVE,OAAQuD,IAKhBsN,GAAY1X,UAAUwY,aAAe,SAASnM,GAQ1C,MAPc,CACVhG,QAAS,eACTI,KAAM,sFACNF,OAAQ8F,EACR7F,MAAM,IAAImK,MAAOyH,iBACjBzQ,MAAM,IAKd+P,GAAY1X,UAAUyY,UAAY,SAASpM,GACvC,IACM0M,EAAW,CACb,sBAAwB1M,EAASpK,KAAKgG,QACtC,wCASJ,MAPc,CACV5B,QAAS7E,KAAKH,QAAQpB,gBANN,CAAC,SAAS,UAAU,wBAAwB,kBAO5DwG,KAAMjF,KAAKH,QAAQpB,gBAAgB8Y,GACnCxS,OAAQ8F,EACR7F,MAAM,IAAImK,MAAOyH,iBACjBzQ,MAAM,IAKd+P,GAAY1X,UAAUgY,WAAa,SAAS3L,GACxC,IACM2M,EAAY,CACd,gBAAkB3M,EAASpK,KAAKgG,QAAU,sBAS9C,MAPc,CACV5B,QAAS7E,KAAKH,QAAQpB,gBALL,CAAC,aAAa,eAAe,oBAM9CwG,KAAMjF,KAAKH,QAAQpB,gBAAgB+Y,GACnCzS,OAAQ8F,EACR7F,MAAM,IAAImK,MAAOyH,iBACjBzQ,MAAM,IAKd+P,GAAY1X,UAAU+X,UAAY,SAASH,GAYvC,MAPc,CACVvR,QAAS7E,KAAKH,QAAQpB,gBALN,CAAC,gBAAgB,2BAMjCwG,KAAMjF,KAAKH,QAAQpB,gBALN,CACb,eAKAsG,OAAQqR,EACRpR,MAAM,IAAImK,MAAOyH,iBACjBzQ,MAAM,IAKd+P,GAAY1X,UAAUiZ,UAAY,SAASrB,GAYvC,MAPc,CACVvR,QAAS7E,KAAKH,QAAQpB,gBALN,CAAC,2BAMjBwG,KAAMjF,KAAKH,QAAQpB,gBALN,CACb,oFAKAsG,OAAQqR,EACRpR,MAAM,IAAImK,MAAOyH,iBACjBzQ,MAAM,IAKC+P,UCnOf,SAASwB,KACL5X,QAAQC,IAAI,0BACZC,KAAKH,QAAU,IAAItB,EAGvBmZ,GAAclZ,UAAUmZ,sBAAwB,SAASvB,EAAKC,EAAUC,GAEpE,GAAGF,EAAKzM,MAAM5F,UAAY,IAAMqS,EAAKzM,MAAM5F,UAAY,GACnD,OAAO/D,KAAKuW,YAETF,EAAU1M,MAAM5F,WAM3B2T,GAAclZ,UAAUoZ,gBAAkB,SAASzO,EAAKnE,EAAKqR,EAAUC,GAI3D,OAAOtW,KAAK6X,YAAY7S,EAAKqR,IAIzCqB,GAAclZ,UAAUqZ,YAAc,SAAS7S,EAAK6F,GAChD,IAGM5F,EAAOjF,KAAKH,QAAQpB,gBAHL,CAAC,0CAA2C,qCAC3C,kCAAmC,qCAAsC,+BAI/F,OADgBuB,KAAKmO,QAAQtD,EAASpK,KAAKgG,QAAQxB,EAAKD,GAAK,IAIjE0S,GAAclZ,UAAU2P,QAAU,SAASpJ,EAAOE,EAAKD,EAAK8S,GACxD,MAAO,CACH/S,OAAQA,EACRE,KAAMA,EACND,KAAMA,EACN8S,QAASA,IAQFJ,UC0bAnX,G,YAtdb,aAAc,IAAD,8BACX,+CA8CFvB,MAAQ,SAAC+Y,EAAmBC,GAC1BlY,QAAQC,IAAI,iBACZ,IAAMG,EAAW,IAAIqV,GACfvT,EAAS,IAAIyM,EACb8C,EAAgB,GAChB0G,EAAkB,GAClBC,EAAc,GAEdxP,EAAaxI,EAASwI,YAAW,GACvC6I,EAAc1F,KAAKnD,GACnB,IAAMyP,EAAkB,EAAKC,qBAAqBzB,cAAc,UAAUjO,GAC1EwP,EAAYrM,KAAKsM,GAEjBH,EAAmBA,GAAsC,EACzD,IAAI,IAAI1Y,EAAI,EAAIA,EAAI0Y,EAAkB1Y,IAAK,CACzC,IAAMoO,EAAY,EAAK2K,wBAAwB5G,yBAC/CwG,EAAgBpM,KAAK6B,GACrB,IAAM4K,EAAW,EAAKF,qBAAqBzB,cAAc,YAAYjJ,GACrEwK,EAAYrM,KAAKyM,GACjB,IAAMC,EAAerY,EAASwI,YAAW,GACzC6I,EAAc1F,KAAK0M,GAKrB,IAAM/G,EAAiB,EAAK6G,wBAAwBjH,uBAAuB,EAAE,EAAEG,GACzEiH,EAAkB,EAAKC,cAAcjH,EAAe5G,WACpDoM,EAAe,EAAKoB,qBAAqBzB,cAAc,QAAQ6B,EAAgB,IAGrFxW,EAAO4M,0BAA0B4C,EAAe5G,UAAU2G,GAE1D,IAAMpN,GAAY,IAAIgL,MAAOC,cAE7B,EAAK9M,SAAS,CACZpC,SAAUA,EACV8B,OAAQA,EACR4I,UAAW4N,EACX3U,cAAe2N,EAAe3N,cAC9B8E,SAAU6I,EAAeD,cACzB9D,WAAYwK,EACZhS,OAAO,GAAD,OAAMiS,EAAN,CAAkBlB,IACxB3P,MAAO,CAAC,8BACRlD,UAAWA,KA1FF,EA6FbO,WAAa,WACX5E,QAAQC,IAAI,kBACZ,EAAKuC,SAAS,CACZ+B,aAAa,IAEf,EAAKqU,SAAWC,aAAY,WAC1B,EAAKC,WACL,EAAKhZ,MAAMiZ,aApGF,EAsGbD,OAAS,WAEP,IAAM5W,EAAS,EAAKpC,MAAMoC,OACtB8W,EAAmB,EAAKlZ,MAAMiE,cAC9BG,EAAO,EAAKpE,MAAMoE,KAClBE,EAAM,EAAKtE,MAAMsE,IACjBD,EAAQ,EAAKrE,MAAMqE,MACnBG,EAAO,EAAKxE,MAAMwE,KAChBwG,EAAY,EAAKhL,MAAMgL,UACvB6C,EAAa,EAAK7N,MAAM6N,WACxB9E,EAAW,EAAK/I,MAAM+I,SACtBtB,EAAQ,EAAKzH,MAAMyH,MACnBpB,EAAS,EAAKrG,MAAMqG,OACpBiI,EAAW,EAAKtO,MAAMsO,SAEtB6K,EAAmB,CACvBjV,aAAc,EACdC,UAAW,EACXkF,OAAQ,GA4BV,GAzBG,EAAKrJ,MAAMoE,MAAQ,IAEpBA,EAAO,EACJ,EAAKpE,MAAMsE,KAAO,IAEnBA,EAAM,EACH,EAAKtE,MAAMqE,OAAS,GACrBA,EAAQ,GAGRA,EAAQ,EAAKrE,MAAMqE,MAAQ,EAC3BG,EAAO,EAAKxE,MAAMwE,KAAO,IAI3BF,EAAM,EAAKtE,MAAMsE,IAAM,GAGzBF,EAAO,EAAKpE,MAAMoE,KAAO,EAOxB,EAAKpE,MAAMoC,OAAOE,KAAO,GAAK,EAAKtC,MAAMgL,UAAU,GAAG7G,WAAa,EAAE,CACtE,IAAMa,EAAQ,EAAKwT,qBAAqBX,UAAU,EAAK7X,MAAMgL,UAAU,IAKvE,OAJA3E,EAAOmD,QAAQxE,QACf,EAAKtC,SAAS,CACZ2D,OAAQA,IAIOtH,KAAKC,MAAMD,KAAKE,UAEnC,GAAY,IAATmF,EAAW,CAEZ,IAAI,IAAIgV,EAAI,EAAGA,EAAIpO,EAAU9L,OAAQka,IAOnC,GALApO,EAAUoO,GAAGJ,SAEbG,EAAiBjV,cAAgB8G,EAAUoO,GAAGrP,MAAM7F,aACpDiV,EAAiBhV,WAAa6G,EAAUoO,GAAGrP,MAAM5F,UACjDgV,EAAiB9P,QAAU2B,EAAUoO,GAAGrP,MAAMV,OAC3C2B,EAAUoO,GAAV,KAAqB,CACtB3R,EAAMwE,KAAK,oBACX,IAAMoL,EAAY,EAAKmB,qBAAqBzB,cAAc,OAAO/L,EAAUoO,IAC3E/S,EAAOmD,QAAQ6N,GACfrM,EAAUqL,OAAO+C,EAAE,GAGvBF,EAAmB,CACjBhV,aAAcnF,KAAKC,MAAMma,EAAiBjV,aAAa8G,EAAU9L,QACjEiF,UAAWpF,KAAKC,MAAMma,EAAiBhV,UAAU6G,EAAU9L,QAC3DmK,OAAQtK,KAAKC,MAAMma,EAAiB9P,OAAO2B,EAAU9L,SAIvD,IAFA,IAAMma,EAAmB,GAEjBD,EAAI,EAAGA,EAAIrQ,EAAS7J,OAAQka,IAAI,CACtC,IAAMzV,EAASoF,EAASqQ,GAAGJ,SACxBjQ,EAASqQ,GAAG3N,iBAAmB,MAChC4N,EAAiBpN,KAAKlD,EAASqQ,IAC/BhX,EAAO4W,OAAOrV,IAIhBzD,QAAQC,IAAI,UAAUwD,IAEX,KAARW,GAAcyE,EAASqQ,GAAGjE,YAC3B/S,EAAO4W,OAAOrV,GAEdzD,QAAQC,IAAI,qBACZD,QAAQC,IAAIiZ,IAGhB,IAAI,IAAIE,EAAI,EAAGA,EAAID,EAAiBna,OAAQoa,IAC1CvQ,EAASsN,OAAOgD,EAAiBC,GAAG,GAKxC,IAAMtJ,EAAIjR,KAAKE,SACf,GAAG+Q,EAAI,EAAKhQ,MAAMuZ,aAAaC,eAAe,CAG5C,IAAMhD,EAAOxL,EAAU,GACjByL,EAAY,EAAKxW,QAAQpB,gBAAgBmM,GACzC0L,EAAY,EAAKzW,QAAQpB,gBAAgBmM,GAEzChG,EAAQ,EAAKwT,qBAAqBjC,oBAAoBC,EAAKC,EAAUC,GAC3ErQ,EAAOmD,QAAQxE,GAGf,IAAMyU,EAAY,EAAKxZ,QAAQpB,gBAAgBmM,GACzCuD,EAAU,EAAKmL,uBAAuB1B,gBAAgB,KAAK,SAASyB,GAG1E,GAFAnL,EAASrC,KAAKsC,GAEXnK,EAAK,IAAI,GAAK,EAAKpE,MAAM6N,WAAa,GAEpC,EAAK7N,MAAM6N,WAAW3O,OAAS,GAAG,CACnC,IAAM4O,EAAY,EAAK2K,wBAAwB5G,yBAC/ChE,EAAW5B,KAAK6B,GAChB,IAAM4K,EAAW,EAAKF,qBAAqBzB,cAAc,YAAYjJ,GACrEzH,EAAO4F,KAAKyM,GAGhB,GAAG1I,EAAI,EAAKhQ,MAAMuZ,aAAaI,kBAE1B,EAAK3Z,MAAM+I,SAAS7J,OAAS,GAAG,CAGjC,IAAM8J,EAAU,EAAKhJ,MAAMM,SAASwI,aACpCC,EAASkD,KAAKjD,GACd,IAAMuP,EAAkB,EAAKC,qBAAqBzB,cAAc,UAAU/N,GAC1E3C,EAAO4F,KAAKsM,IAIlB,IAAMqB,EAAcvT,EAAOnH,OAAS,IAAMmH,EAAOwT,MAAM,EAAE,KAAOxT,EAC1DyT,EAAgBxL,EAASpP,OAAS,IAAMoP,EAASuL,MAAM,EAAE,KAAOvL,EAEtE,EAAK5L,SAAS,CACZ0B,KAAMA,EACNE,IAAKA,EACLD,MAAOA,EACPG,KAAMA,EACNwG,UAAWA,EACXjC,SAAUA,EACV1C,OAAQuT,EACRtL,SAAUwL,EACVrS,MAAOA,EACPrF,OAAQA,EACR6B,cAAeiV,KA/PN,EAkQbxU,UAAY,WACVxE,QAAQC,IAAI,kBACZ4Z,cAAc,EAAKjB,UACnB,EAAKpW,SAAS,CACZ+B,aAAa,KAtQJ,EAyQbqF,cAAgB,SAACxB,GACfpI,QAAQC,IAAI,mBAAoBmI,GAEhC,EAAK5F,SAAS,CACZsI,UAAU,CAAE1C,GAAH,mBAAY,EAAKtI,MAAMgL,eA7QvB,EAgRbzC,eAAiB,SAACF,GAChBnI,QAAQC,IAAI,qBACZD,QAAQC,IAAIkI,GACZ,IAAM2C,EAAY,EAAKhL,MAAMgL,UAAUxK,KAAI,SAACyK,GAAD,OAAcA,EAAS/B,KAAOb,EAAgBa,GAAK+B,EAAU5C,KACvE,OAA9BA,EAAgBY,WACjBZ,EAAgBW,QAAQgR,aAAa3R,GAEvCA,EAAgBW,QAAQ+I,wBACxB,IAAMhJ,EAAW,EAAK/I,MAAM+I,SAASzC,QAAO,SAAC0C,GAAD,OAAaA,EAAQE,KAAOb,EAAgBW,QAAQE,GAAKF,EAAUX,EAAgBW,WACzH5G,EAAS,EAAKpC,MAAMoC,OAC1BA,EAAO4M,0BAA0BhE,EAAUjC,GAC3C7I,QAAQC,IAAIkI,GACZ,EAAK3F,SAAS,CACZsI,UAAWA,EACXjC,SAAUA,EACV3G,OAAQA,KA/RC,EAkSbsG,oBAAsB,SAACL,GACrBnI,QAAQC,IAAI,kCACZ,IAAM6K,EAAY,EAAKhL,MAAMgL,UAAUxK,KAAI,SAACyK,GAAD,OAAcA,EAAS/B,KAAOb,EAAgBa,GAAK+B,EAAU5C,KACxG,EAAK3F,SAAS,CACZsI,UAAWA,KAtSF,EAySbnB,aAAe,SAACvB,GACdpI,QAAQC,IAAI,kBAAmBmI,GAC/B,IAAM0C,EAAY,EAAKhL,MAAMgL,UAAU1E,QAAO,SAAC2E,GAAD,OAAcA,EAAS/B,KAAOZ,KACtEsQ,EAAkB,EAAKC,cAAc7N,GAC3C,EAAKtI,SAAS,CACZsI,UAAW4N,KA9SF,EAiTbC,cAAgB,SAAC7N,GACf,OAAOA,EAAUiP,MAAK,SAASb,EAAEE,GAAG,OAAOA,EAAE1P,MAAQwP,EAAExP,UAlT5C,EAoTbmE,iBAAmB,SAACzF,GAClBpI,QAAQC,IAAI,uBAAwBmI,GACpC,EAAK5F,SAAS,CACZmL,WAAa,EAAK7N,MAAM6N,WAAWvH,QAAO,SAACwH,GAAD,OAAeA,EAAU5E,KAAOZ,QAvTjE,EA0TbyO,cAAgB,SAACmD,GAEf,EAAKxX,SAAS,CACX2D,OAAO,CAFI,SAEL,mBAAa,EAAKrG,MAAMqG,YA7TtB,EAgUb8T,YAAc,SAACza,GACb,EAAKgD,SAAS,CACZ2D,OAAQ,EAAKrG,MAAMqG,OAAOC,QAAO,SAACtB,EAAMzF,GAAP,OAAaA,IAAMG,QAlU3C,EAqUb0a,aAAe,SAACC,EAAKC,EAAU/Q,EAAK9D,EAAO8U,GAEzC,EAAK7X,SAAS,CACX+E,MAAM,CAFI,QAEL,mBAAY,EAAKzH,MAAMyH,WAxUpB,EA2UbI,YAAc,SAACnI,GACbQ,QAAQC,IAAI,mBAAqBT,GACjC,EAAKgD,SAAS,CACZ+E,MAAO,EAAKzH,MAAMyH,MAAMnB,QAAO,SAACmB,EAAMlI,GAAP,OAAaA,IAAMG,QA9UzC,EAiVb8a,YAAc,SAAC9a,GACb,EAAKgD,SAAS,CACX+E,MAAO,EAAKzH,MAAMyH,MAAMnB,QAAO,SAACoB,EAAKnI,GAAN,OAAYA,IAAIG,QAnVvC,EAsVb+a,WAAa,SAAClM,KAtVD,EAyVb/I,gBAAkB,SAACkV,GACjBxa,QAAQC,IAAI,sBAAuBua,GACnCA,EAAkBnV,UAAW,EAC7B,IAAMwD,EAAW,EAAK/I,MAAM+I,SAASvI,KAAI,SAACwI,GAAD,OAAaA,EAAQE,KAAOwR,EAAkBxR,GAAKF,EAAS0R,KACrG,EAAKhY,SAAS,CACZqG,SAAUA,KA9VD,EAiWbrD,cAAgB,SAACgV,GACfxa,QAAQC,IAAI,oBAAqBua,GACjCA,EAAkBvP,UAAW,EAC7B,IAAMpC,EAAW,EAAK/I,MAAM+I,SAASvI,KAAI,SAACwI,GAAD,OAAaA,EAAQE,KAAOwR,EAAkBxR,GAAKF,EAAS0R,KACrG,EAAKhY,SAAS,CACZqG,SAAUA,KAtWD,EAyWbqC,cAAgB,SAACuP,GACfza,QAAQC,IAAI,oBAAqBwa,GACjC,EAAKjY,SAAS,CACZqG,SAAU,EAAK/I,MAAM+I,SAASzC,QAAO,SAAC0C,GAAD,OAAaA,EAAQE,KAAOyR,QA5WxD,EA+WbzO,gBAAkB,SAAC0O,GACjB1a,QAAQC,IAAI,mBAAoBya,GAMhC1a,QAAQC,IAAI,EAAKH,MAAM+I,UACvB,EAAKrG,SAAS,CACZqG,SAAU,EAAK/I,MAAM+I,SAASzC,QAAO,SAAC0C,GAAD,OAAaA,EAAQE,KAAO0R,KACjE1N,MAAO,EAAKlN,MAAMkN,MAAM5G,QAAO,SAACiG,GAAD,OAAUA,EAAKrD,KAAO,WAAW0R,KAChEtN,WAAY,EAAKtN,MAAMsN,WAAa,KA1X3B,EA6XbrG,QAAU,SAACsC,EAAKjB,GACdpI,QAAQC,IAAI,cAAcmI,GAC1B,IAAMiE,EAAO,CAAChD,KAAKA,EAAKjB,KAAKA,EAAKuE,QAAO,EAAM3D,GAAGK,EAAK,IAAIjB,EAAKY,IAChE,EAAKxG,SAAS,CACZwK,MAAM,GAAD,mBAAM,EAAKlN,MAAMkN,OAAjB,CAAuBX,IAC5Be,WAAY,EAAKtN,MAAMkN,MAAMhO,UAlYpB,EAqYb4N,WAAa,SAACpN,GACZQ,QAAQC,IAAI,gBAAiBT,GAC7B,IAAM4N,EAAa,EAAKtN,MAAMsN,aAAe5N,EAAIA,EAAI,EAAG,EAAKM,MAAMsN,WACnEpN,QAAQC,IAAI,kBAAmB,EAAKH,MAAMsN,YAC1CpN,QAAQC,IAAI,kBAAmBmN,GAC/B,EAAK5K,SAAS,CACXwK,MAAO,EAAKlN,MAAMkN,MAAM5G,QAAO,SAACiG,EAAKhN,GAAN,OAAYG,IAAMH,KACjD+N,WAAYA,KA5YJ,EA+YbV,WAAa,SAAClN,GACZ,EAAKgD,SAAS,CACZ4K,WAAY5N,KAjZH,EAoZbmb,YAAc,SAACxV,GACb,EAAK3C,SAAS,CACZ6L,QAASlJ,KAtZA,EAyZbyV,aAAe,WACb,EAAKpY,SAAS,CACZ6L,QAAS,QAzZX,EAAKvO,MAAQ,CAEX+a,OAAO,EACPza,SAAU,IAAIqV,GACdvT,OAAQ,IAAIyM,EACZmM,cAAc,EACdjS,SAAU,GACVkS,eAAgB,GAChBjQ,UAAW,GACX/G,cAAe,CACbC,aAAc,EACdC,UAAW,EACXkF,OAAQ,GAEVwE,WAAY,GACZpG,MAAO,GACPpB,OAAQ,GACRiI,SAAU,GACVlK,KAAM,EACNE,IAAK,GACLD,MAAO,EACPG,KAAM,EACND,UAAW,KACX0U,WAAY,IACZxU,aAAa,EACb6I,WAAY,EACZJ,MAAO,CACL,CAAC3D,KAAK,QAAQsD,QAAO,GACrB,CAACtD,KAAK,QAAQsD,QAAO,IAEvB0M,aAAc,CACZC,eAAgB,IAChBG,iBAAkB,MAGtB,EAAKuB,YAAc,IAAI/E,GACvB,EAAKsC,wBAA0B,IAAIzH,EACnC,EAAKmK,uBAAyB,IAAI7F,GAClC,EAAKkD,qBAAuB,IAAIlC,GAChC,EAAKoD,uBAAyB,IAAI5B,GAClC,EAAK7X,QAAU,IAAItB,EA1CR,E,iFA6CXyB,KAAKhB,U,+BAmXL,OACE,kBAAC,IAAMyE,SAAP,KACI,yBAAK8C,UAAU,OACH,kBAAC,EAAD,CAAUqE,UAAW5K,KAAKJ,MAAMgL,UACtBjC,SAAU3I,KAAKJ,MAAM+I,SACrB8E,WAAYzN,KAAKJ,MAAM6N,WACvB5G,QAAS7G,KAAK6G,QACd8G,iBAAkB3N,KAAK2N,mBAE/B,yBAAKpH,UAAU,kBACf,kBAAC,EAAD,CACEvC,KAAMhE,KAAKJ,MAAMoE,KACjBE,IAAKlE,KAAKJ,MAAMsE,IAChBD,MAAOjE,KAAKJ,MAAMqE,MAClBG,KAAMpE,KAAKJ,MAAMwE,KACjBD,UAAWnE,KAAKJ,MAAMuE,UACtBE,YAAarE,KAAKJ,MAAMyE,YACxBK,WAAY1E,KAAK0E,WACjBJ,UAAWtE,KAAKsE,UAChBtC,OAAQhC,KAAKJ,MAAMoC,OACnB2G,SAAU3I,KAAKJ,MAAM+I,SACrBzI,SAAUF,KAAKJ,MAAMM,SACrB2D,cAAe7D,KAAKJ,MAAMiE,gBAG1B,kBAAC,EAAD,CAAMiJ,MAAO9M,KAAKJ,MAAMkN,MAClBI,WAAYlN,KAAKJ,MAAMsN,WACvBrG,QAAS7G,KAAK6G,QACd2F,WAAYxM,KAAKwM,WACjBE,WAAY1M,KAAK0M,WACjBhD,cAAe1J,KAAK0J,cACpBiE,iBAAkB3N,KAAK2N,iBACvBxF,eAAgBnI,KAAKmI,eACrBG,oBAAqBtI,KAAKsI,oBAC1BmB,aAAczJ,KAAKyJ,aACnBhC,YAAazH,KAAKyH,YAClBrC,gBAAiBpF,KAAKoF,gBACtBE,cAAetF,KAAKsF,cACpB0F,cAAehL,KAAKgL,cACpBc,gBAAiB9L,KAAK8L,gBACtB7F,OAAQjG,KAAKJ,MAAMqG,OACnBoB,MAAOrH,KAAKJ,MAAMyH,MAClBsB,SAAU3I,KAAKJ,MAAM+I,SACrBiC,UAAW5K,KAAKJ,MAAMgL,aAGtC,kCAEA,kBAAC,EAAD,CAAS1J,KAAMlB,KAAKJ,MAAMob,YAAa/V,KAAMjF,KAAKJ,MAAMuO,QAASuM,aAAc1a,KAAK0a,aAAcxM,SAAUlO,KAAKJ,MAAMsO,gB,GAjdjHpM,aCGPmZ,G,YAdb,aAAc,IAAD,8BACX,+CACKrb,MAAQ,CACXsb,SAAS,GAHA,E,sEAQX,OACE,kBAAC,GAAD,CAASA,QAASlb,KAAKJ,MAAMsb,c,GAVjBpZ,aCKEqZ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS1R,MACvB,2D,OCXN2R,IAAS5O,OAAO,kBAAC,GAAD,MAASlK,SAAS+Y,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b4f362e1.chunk.js","sourcesContent":["function Helpers(){}\n\nHelpers.prototype.RandomFromArray = function(arr){\n    return arr[Math.floor(Math.random()*arr.length)]\n}\n\nHelpers.prototype.RandomBetweenInts = function(start,end){\n    return Math.floor(Math.random()*(end-start)) + start\n}\n\n//find a random number of items from an array, without repeating\nHelpers.prototype.XRandomWithoutRepeats = function(arr,x){\n    const tempArr = [];\n    tempArr.fill(0,arr.length-1);\n    for(let i = 0; i < x; i++){\n        const r = Math.floor(Math.random()*tempArr);\n\n    }\n}\n\nHelpers.prototype.monify = function(num){\n   return '$' + num.toString().replace(/(\\d)(?=(?:\\d{3})+$)/g, '$1,');\n}\n\nexport default Helpers","import React, {Component} from 'react';\nimport Helpers from '../../Scripts/Helpers';\n\nimport {Modal, Grid,Card, Button} from 'semantic-ui-react';\n\nclass IndustryModal extends Component{\n    constructor(){\n        super()\n        this.state = {}\n        this.helpers = new Helpers();\n    }\n    render(){\n        console.log('industry props',this.props.industry)\n        const clients = this.props.industry.clients.map((client)=>{\n            return(\n                <Card>\n                    <Card.Content>\n                        <Card.Header>{client.name}</Card.Header>\n                        <Card.Description>\n                            Rep: {client.rep.name.full}\n                        </Card.Description>\n                    </Card.Content>\n                </Card>\n            )\n        })\n        const competitors = this.props.industry.competitors.map((competitor)=>{\n            const income = this.helpers.monify(competitor.monthlyProfit * 12)\n            return(\n                <Card>\n                    <Card.Content>\n                        <Card.Header>{competitor.name}</Card.Header>\n                        <Card.Description>\n                            Yearly income: {income}\n                        </Card.Description>\n                    </Card.Content>\n                </Card>\n            )\n        })\n        return(\n            <Modal open={this.props.open} style={{height:'90vh'}}>\n                <Modal.Header>\n                    Industry\n                    <Button onClick={()=>this.props.closeModal('industryModalOpen')} style={{float:'right'}}>X</Button>\n                </Modal.Header>\n                <Modal.Content>\n                    <Grid columns={2}>\n                        <Grid.Column width={8}>\n                            <Grid.Row>clients</Grid.Row>\n                            {clients}\n                        </Grid.Column>\n                        <Grid.Column width={8}>\n                            <Grid.Row>competitors</Grid.Row>\n                            {competitors}\n                        </Grid.Column>\n                    </Grid>\n                </Modal.Content>\n            </Modal>\n        )\n    }\n}\n\nexport default IndustryModal","import React, {Component} from 'react';\n\nimport {Modal,Grid, Button} from 'semantic-ui-react';\n\nclass AgencyModal extends Component{\n    constructor(){\n        super()\n        this.state = {}\n    }\n//     coh: 100000\n// maxSalary: 300000\n// monthlyExpenditures: 300000\n// monthlyProfit: 100000\n// name: \"Web Brands\"\n// yearsInOperation: 1\n    render(){\n        // console.log('agency modal props',this.props)\n        return(\n            <Modal open={this.props.open} style={{height:'90vh'}}>\n                <Modal.Header>\n                    {this.props.agency.name}\n                    <Button onClick={()=>this.props.closeModal('agencyModalOpen')} style={{float:'right'}}>X</Button>\n                </Modal.Header>\n                <Modal.Content>\n                <Modal.Description>\n                    <Grid columns={2}>\n                        <Grid.Column>\n                            <Grid.Row>Years of Operation:</Grid.Row>\n                            <Grid.Row>Cash on Hand:</Grid.Row>\n                            <Grid.Row>Monthly Expenses:</Grid.Row>\n                            <Grid.Row>Monthly Income:</Grid.Row>\n                            <Grid.Row>Active Projects:</Grid.Row>\n                            <Grid.Row>Total Employees:</Grid.Row>\n                            <Grid.Row>Highest Salary:</Grid.Row>\n                            <Grid.Row>Lowest Salary:</Grid.Row>\n                            <Grid.Row>Average Salary:</Grid.Row>\n                        </Grid.Column>\n                        <Grid.Column>\n                            <Grid.Row>{this.props.agency.yearsInOperation}</Grid.Row>\n                            <Grid.Row>{this.props.agency.coh}</Grid.Row>\n                            <Grid.Row>{this.props.agency.monthlyExpenditures}</Grid.Row>\n                            <Grid.Row>{this.props.agency.monthlyProfit}</Grid.Row>\n                            <Grid.Row>Active Projects:</Grid.Row>\n                            <Grid.Row>Total Employees:</Grid.Row>\n                            <Grid.Row>{this.props.agency.maxSalary}</Grid.Row>\n                            <Grid.Row>Lowest Salary:</Grid.Row>\n                            <Grid.Row>Average Salary:</Grid.Row>\n                        </Grid.Column>\n                    </Grid>\n                </Modal.Description>\n                </Modal.Content>\n            </Modal>\n        )\n    }\n}\n\nexport default AgencyModal","import React, {Component} from 'react';\n\nimport IndustryModal from '../Industry/modal';\nimport AgencyModal from '../Agency/modal';\nimport Helpers from '../../Scripts/Helpers';\n\n\nimport '../../App.css';\nimport { Grid, Button, Icon } from 'semantic-ui-react';\n\nclass Header extends Component{\n  constructor(){\n    super()\n    this.state = {\n       industryModalOpen: false,\n       agencyModalOpen: false,\n       fullscreen: false,\n    }\n    this.helpers = new Helpers();\n  }\n  openModal = (name) => {\n    this.setState({\n      [name]: true\n    })\n  }\n  closeModal = (name) => {\n    this.setState({\n      [name]: false\n    })\n  }\n  openFull = () => {\n    const elem = document.documentElement;\n    if (elem.requestFullscreen) {\n      elem.requestFullscreen();\n    } else if (elem.mozRequestFullScreen) { /* Firefox */\n      elem.mozRequestFullScreen();\n    } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\n      elem.webkitRequestFullscreen();\n    } else if (elem.msRequestFullscreen) { /* IE */\n      elem.msRequestFullscreen();\n    }\n    this.setState({\n      fullscreen: true\n    })\n  }\n  closeFull = () => {\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) { /* Firefox */\n      document.mozCancelFullScreen();\n    } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\n      document.webkitExitFullscreen();\n    } else if (document.msExitFullscreen) { /* IE */\n      document.msExitFullscreen();\n    }\n    this.setState({\n      fullscreen: false\n    })\n  }\n  render(){\n    // console.log('header props:', this.props)\n    const coh = this.helpers.monify(this.props.agency.coh)\n    const profit = this.helpers.monify(this.props.agency.monthlyProfit);\n    const loss = this.helpers.monify(this.props.agency.monthlyExpenditures)\n    return (\n      <React.Fragment>\n        <header>\n          <nav>\n            <Grid celled='internally'>\n                <Grid.Column width={5} style={{padding:\"0 10px\"}}>\n                  <h3>{this.props.agency.name}</h3>\n                  <h5 style={{marginTop:\"0\"}}>{this.props.agency.yearsInOperation} years in operation</h5>\n                  <Grid.Row>\n                    <button onClick={()=>this.openModal('agencyModalOpen')}>agency</button>\n                    <button onClick={()=>this.openModal('industryModalOpen')}>industry</button>\n                  </Grid.Row>\n                </Grid.Column>\n                <Grid.Column width={3} style={{padding:\"0\"}}>\n                  <Grid.Row>Cash on Hand</Grid.Row>\n                  <Grid.Row>Income/Month</Grid.Row>\n                  <Grid.Row>Loss/Month</Grid.Row>\n                  <Grid.Row>Emp.Productivity</Grid.Row>\n                  <Grid.Row>Emp.Happiness</Grid.Row>\n                </Grid.Column>\n                <Grid.Column width={3} style={{padding:\"0\"}}>\n                  <Grid.Row>{coh}</Grid.Row>\n                  <Grid.Row>{profit}</Grid.Row>\n                  <Grid.Row>{loss}</Grid.Row>\n                  <Grid.Row>{this.props.employeeStats.productivity}%</Grid.Row>\n                  <Grid.Row>{this.props.employeeStats.happiness}%</Grid.Row>\n                </Grid.Column>\n                \n                <Grid.Column width={3} style={{padding:\"0\"}}>\n                  <Grid.Row>\n                      <span>{this.props.hour < 10 ? \"0\" + this.props.hour + \":00\" : this.props.hour + \":00\"}</span>\n                  </Grid.Row>\n                  <Grid.Row>\n                    <span>{this.props.month}</span>/<span>{this.props.day}</span>/<span>{this.props.startYear+this.props.year}</span>\n                  </Grid.Row>\n                  <Grid.Row >\n                    {\n                      !this.props.timeRunning ? \n                      <Button color=\"green\" size=\"small\" style={{padding:\"10%\"}} onClick={this.props.startTimer}><Icon name=\"play\"></Icon></Button>\n                      :\n                      <Button onClick={this.props.stopTimer} style={{padding:\"10%\"}}><Icon color=\"red\" name=\"stop\"></Icon></Button>\n                    }\n                    {\n                      !this.state.fullscreen ?\n                      <Button onClick={this.openFull} style={{padding:\"10%\"}}><Icon name=\"window maximize outline\"></Icon></Button>\n                      :\n                      <Button onClick={this.closeFull} style={{padding:\"10%\"}}><Icon name=\"window restore outline\"></Icon></Button>\n                    }\n                  </Grid.Row>\n                </Grid.Column>     \n            </Grid>\n          </nav>\n      </header>\n      {\n        !this.state.industryModalOpen ? '' :\n        <IndustryModal industry={this.props.industry} open={this.state.industryModalOpen} closeModal={this.closeModal} />\n      }\n      {\n        !this.state.agencyModalOpen ? '' :\n        <AgencyModal agency={this.props.agency} open={this.state.agencyModalOpen} closeModal={this.closeModal} />\n      }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react'\n\nimport {Modal,Grid, Header,Button} from 'semantic-ui-react';\n\nconst ViewEmailModal = (props) => (\n    <Modal open={props.open}>\n        <Modal.Header>\n            {props.email.subject}\n            <Button onClick={props.closeEmail} style={{float:'right'}}>\n                X\n            </Button>\n        </Modal.Header>\n        <Modal.Content>\n        {/* <Grid celled>\n            <Grid.Row>\n                <Grid.Column></Grid.Column>\n                <Grid.Column></Grid.Column>\n            </Grid.Row>\n        </Grid> */}\n        <Header>{props.email.sender.name.email}</Header>\n        <Header>to: you@companyname.com</Header>\n        <Header>{props.email.time}</Header>\n        <Modal.Description>\n            {/* <Header>{props.email.sender.name.display}</Header> */}\n            {props.email.text}\n        </Modal.Description>\n        </Modal.Content>\n        <h3>reply</h3>\n        <br></br>\n        <Modal.Actions>\n            {\n                !props.email.consider ? \"\" :\n                <React.Fragment>\n                    <Button onClick={()=>props.considerProject(props.email.target)}>Sure, we'll consider you</Button>\n                    <Button onClick={()=>props.acceptProject(props.email.target)}>Yeah, let's do it</Button>\n                    <Button >Sorry, maybe another time</Button>\n                </React.Fragment>\n            }\n            {\n                !props.email.accept ? \"\" :\n                <React.Fragment>\n                    <Button >Accept</Button>\n                    <Button >Reject</Button>\n                </React.Fragment>\n            }\n            {\n                props.email.accept || props.email.consider  ? '' :\n                <React.Fragment>\n                    <Button>Reply</Button>\n                    <Button>Forward</Button>\n                </React.Fragment>\n            }\n            \n        </Modal.Actions>\n    </Modal>\n)\n\nexport default ViewEmailModal","import React, { Component } from 'react'\n\nimport {Modal,Header,Button} from 'semantic-ui-react';\n\nclass NewEmailModal extends Component{\n    constructor(){\n        super()\n        this.suggestions = [{\n            \n        }]\n    }\n    render(){\n        return(\n            <Modal open={this.props.open}>\n                <Modal.Header>\n                    <Button onClick={this.props.closeEmail} style={{float:'right'}}>\n                        X\n                    </Button>\n                </Modal.Header>\n                <Modal.Content>\n                <Modal.Description>\n                    \n                </Modal.Description>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button>Reply</Button>\n                </Modal.Actions>\n            </Modal>\n        )\n    }\n}\n\nexport default NewEmailModal","import React, {Component} from 'react';\n\nimport ViewEmailModal from './view';\nimport NewEmailModal from './new';\n\nimport '../../App.css';\nimport{ Container, Grid, Icon, Button } from 'semantic-ui-react';\n\nclass Email extends Component{\n  constructor(){\n    super();\n    this.state = {\n      boxShowing: 'inbox',\n      openEmail: false,\n      openNew: false,\n      currentEmail: null\n    }\n  }\n  newEmail = () => {\n    this.setState({\n      currentEmail: null,\n      boxShowing: 'inbox',\n      openEmail: false,\n      newEmail: true\n    })\n  }\n  openEmail = (emailIndex) => {\n    this.setState({\n      currentEmail: emailIndex,\n      openEmail: true\n    })\n  }\n  closeEmail = () => {\n    this.setState({\n      currentEmail: null,\n      openEmail: false,\n      openNew: false,\n    })\n  }\n  render(){\n    console.log('emails props',this.props.emails)\n    let emails = this.props.emails;\n    if(this.state.boxShowing === 'inbox'){\n      emails = this.props.emails.filter((email)=> !email.read )\n    } else if (this.state.boxShowing === 'sent'){\n      emails = this.props.emails.filter((email)=> email.sent )\n    }\n    const selectedEmails = !emails.length ? '' : emails.map((email,i)=>{\n      return(\n        <Grid key={'email_'+i} columns={5} onClick={()=>this.openEmail(i)} className=\"hover\" style={{height:\"5vh\",overflow:'hidden'}}>\n          <Grid.Column width={1}>\n            <Icon name=\"mail\"></Icon>\n          </Grid.Column>\n          <Grid.Column width={3}>{email.sender.name.display} </Grid.Column>  \n          <Grid.Column width={3}>\n            {email.subject}\n          </Grid.Column>\n          <Grid.Column width={5}>\n             {email.text}\n          </Grid.Column>\n          <Grid.Column width={4}>\n             {email.time}\n          </Grid.Column>         \n        </Grid> \n\n      )\n    })\n    const selectedEmail = this.state.openEmail ? this.props.emails[this.state.currentEmail] : \"\";\n    return (\n      <React.Fragment>\n        <Container style={{height:'85vh'}}>\n          <h2>Email</h2>\n          <Button onClick={this.newEmail}>+</Button>\n          <Button>inbox</Button>\n          <Button>sent</Button>\n          <Button>all</Button>\n          <hr style={{marginBottom:\"5vh\"}}></hr>\n          {selectedEmails}\n        </Container>\n        {\n          !this.state.currentEmail ? '':\n          <ViewEmailModal open={this.state.openEmail} \n                          email={selectedEmail} \n                          closeEmail={this.closeEmail} \n                          addPane={this.props.addPane}\n                          acceptProject={this.props.acceptProject}\n                          considerProject={this.props.considerProject}\n                          />\n        }\n        {\n          !this.state.newEmail ? '':\n          <NewEmailModal open={this.state.newEmail} closeEmail={this.closeEmail} />\n        }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Email;\n","import React, {Component} from 'react';\n\nimport '../../App.css';\nimport { Header, Form, Input, Button, Icon } from 'semantic-ui-react'\n\nclass Tasks extends Component {\n  constructor(props){\n      super();\n      this.state = {\n          newTaskInput: '',\n      }\n  }\n  onSubmit = (e) => {\n    this.props.addTask(this.state.newTaskInput)\n  }\n  onChange = (e) => {\n    this.setState({\n        [e.target.name]: e.target.value\n    })\n  }\n  render(){\n    console.log('tasks props', this.props);\n    const tasks = this.props.tasks.map((task, i) => {\n        return(\n            <div key={i} className='task'>\n                 <Button style={{padding:'3px',borderRadius:'100%'}}>\n                    <Icon style={{margin:'0'}} name='circle'></Icon>\n                 </Button>\n                <span>{task}</span>\n                <Button onClick={()=>this.props.resolveTask(i)} style={{padding:'3px',borderRadius:'100%'}}>\n                    <Icon style={{margin:'0'}} name='circle'></Icon>\n                </Button>\n            </div>\n        )\n    })\n    return (\n        <div>\n            <Header>Tasks</Header>\n            <Form>\n                <Input name='newTaskInput' value={this.state.newTaskInput} onChange={(e)=>this.onChange(e)} ></Input>\n                <Button onClick={this.onSubmit}>Submit</Button>\n            </Form>\n            <ul>\n                {tasks}\n            </ul>\n        </div>\n      );\n  }\n}\n\nexport default Tasks;","import React from 'react';\n\nconst PersonalIcon = (props) => (\n    <div className=\"personal-icon\" style={{backgroundImage:\"url('/icons/\"+props.icon+\".png')\"}}></div>\n)\n\nexport default PersonalIcon;","import React, { Component } from 'react';\n\nimport PersonalIcon from './icon';\nimport Helpers from '../../Scripts/Helpers';\n\nimport '../../App.css';\nimport { Grid, Button, Dropdown } from 'semantic-ui-react'\n\nclass Employee extends Component {\n  constructor(){\n    super()\n  }\n  raiseSalary = () => {\n    const updatedEmployee = this.props.info;\n    updatedEmployee.raiseSalary();\n    this.props.updateEmployee(updatedEmployee);\n  }\n  lowerSalary = () => {\n    const updatedEmployee = this.props.info;\n    updatedEmployee.lowerSalary();\n    this.props.updateEmployee(updatedEmployee);\n  }\n  promote = () => {\n    const updatedEmployee = this.props.info;\n    updatedEmployee.promote();\n    this.props.updateEmployeeLevel(updatedEmployee);\n  }\n  demote = () => {\n    const updatedEmployee = this.props.info;\n    updatedEmployee.demote();\n    this.props.updateEmployeeLevel(updatedEmployee);\n  }\n  changeProject = (e,data) => {\n    console.log('changing project to:', data.value);\n    const newProject = this.props.projects[data.value];\n    const updatedEmployee = this.props.info;\n    //MTC change to run off employee method that also updates id\n    updatedEmployee.project = newProject ? newProject : null;\n    updatedEmployee.projectId = newProject ? newProject.id : null;\n    this.props.updateEmployeeLevel(updatedEmployee);\n  }\n\n  render(){\n    console.log('employee pprops',this.props);\n    const skills = this.props.info.skills.map((skill,i) => {\n      return(\n        <li key = {i}>{skill}</li>\n      )\n    })\n  const helpers = new Helpers();\n  const salary = helpers.monify(this.props.info.salary);\n  const projectOptions = this.props.type === \"applicant\" ? [] : this.props.projects.map((project,i)=>{\n                                                                                          return(\n                                                                                            {\n                                                                                              key: project.id,\n                                                                                              text: project.name,\n                                                                                              value: i\n                                                                                            }\n                                                                                          )\n                                                                                        })\n  \n  projectOptions.unshift({\n    key: '000',\n    text: 'none',\n    value: null\n  })\n                                                                                        const skillScores = this.props.info.skills.map((skill,i)=>{\n    return <li key={'skill_'+i}>{this.props.info.skillset[skill]}</li>\n  })\n  return (     \n      <Grid celled>\n        <Grid.Row>\n          <Grid.Column width={4}>\n            <h2>\n              <PersonalIcon icon={this.props.info.icon}/>\n              {this.props.info.name.full}</h2>\n          </Grid.Column>\n          <Grid.Column width={4}>\n            {this.props.info.title}\n          </Grid.Column>\n          <Grid.Column width={4}>\n            ID:{this.props.info.id}\n          </Grid.Column>\n          <Grid.Column width={4}>\n            {\n              this.props.info.level === 5 ? '' :\n              this.props.type !== \"applicant\" ? \n              <Button onClick={()=>this.props.fireEmployee(this.props.info.id)}>fire</Button>\n              :\n              <Button onClick={()=>this.props.hireApplicant(this.props.info)}>hire</Button>\n            }\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column width={4}>\n            Productivity:\n          </Grid.Column>\n          <Grid.Column width={4}>\n            {this.props.info.stats.productivity}\n          </Grid.Column>\n          <Grid.Column width={4}>\n            Happiness\n          </Grid.Column>\n          <Grid.Column width={4}>\n            {this.props.info.stats.happiness}\n          </Grid.Column>\n        </Grid.Row>\n        {\n          this.props.info.level === 5 || this.props.type === 'applicant' ? '' :\n          <Grid.Row>\n            <Grid.Column width={4}>\n              Project: {this.props.info.projectId ? this.props.info.project.name : \"unassigned\"}\n            </Grid.Column>\n            <Grid.Column width={4}>\n              Match: {this.props.info.projectId ? this.props.info.match : \"n/a\"}\n            </Grid.Column>\n            <Grid.Column width={4}>\n              Change Project:\n            </Grid.Column>\n            <Grid.Column width={4}>\n              <Dropdown\n                  placeholder='Switch Project'\n                  fluid\n                  selection\n                  options={projectOptions}\n                  onChange={this.changeProject}\n                />\n            </Grid.Column>\n          </Grid.Row>\n        }\n        <Grid.Row>\n          <Grid.Column width={4}>\n            Level:\n          </Grid.Column>\n          <Grid.Column width={4}>\n            {this.props.info.level}\n          </Grid.Column>\n          <Grid.Column width={4}>\n            <Button onClick={this.promote}>Promote</Button>\n          </Grid.Column>\n          <Grid.Column width={4}>\n            <Button onClick={this.demote}>Demote</Button>\n          </Grid.Column>\n        </Grid.Row>\n        \n        <Grid.Row>\n          <Grid.Column width={4}>\n            Salary:\n          </Grid.Column>\n          <Grid.Column width={4}>\n            {salary}\n          </Grid.Column>\n          <Grid.Column width={4}>\n            <Button onClick={this.raiseSalary}>Raise</Button>\n          </Grid.Column>\n          <Grid.Column width={4}>\n            <Button onClick={this.lowerSalary}>Lower</Button>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column width={4}>\n            Skills:\n          </Grid.Column>\n          <Grid.Column width={4}>\n            {skills}\n          </Grid.Column>\n          <Grid.Column width={4}>\n            {skillScores}\n          </Grid.Column>\n          <Grid.Column width={4}></Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n        </Grid.Row>\n      </Grid>\n  );\n  }\n}\n\nexport default Employee;","import React from 'react';\n\nimport {VictoryPie } from 'victory';\n\nimport '../../App.css';\nimport { Grid, Dropdown, Button, Icon } from 'semantic-ui-react';\nimport Helpers from '../../Scripts/Helpers';\n\nfunction Project(props) {\n  console.log('project props',props)\n  const removeEmployee = (removedWorker) => {\n    console.log('removing employee from project',removedWorker)\n    removedWorker.projectId = null;\n    removedWorker.project.workers = removedWorker.project.workers.filter((worker)=> worker.id !== removedWorker.id);\n    props.updateEmployee(removedWorker);\n  }\n  const addEmployee = (e,data) => {\n    \n    const addedEmployee = props.employees[data.value];\n    const project = props.info;\n    project.workers.push(addedEmployee);\n    addedEmployee.projectId = props.info.id;\n    addedEmployee.project = project;\n    \n\n    console.log('adding employee to project',data.value, addedEmployee)\n    props.updateEmployee(addedEmployee);\n  }\n  const helpers = new Helpers();\n  const budget = helpers.monify(props.info.budget)\n  const required = props.info.requirements.required.map((requirement,i) => {\n    return (\n      <li key={'required_'+i}>\n        {requirement}\n      </li>\n    )\n  })\n  const optional = props.info.requirements.optional.map((requirement,i) => {\n    return (\n      <li key={'optional_'+i}>\n        {requirement}\n      </li>\n    )\n  })\n  const workers = props.info.workers.map((worker) => {\n    const skills = worker.skills.map((skill,i)=>{\n      return(\n        <React.Fragment key={worker.id+\"_skill_\"+i}>\n          <Grid.Column width={2}>{skill}</Grid.Column>\n          <Grid.Column width={1}>{worker.skillset[skill]}</Grid.Column>\n        </React.Fragment>\n      )\n    })\n    return (\n      <Grid columns={4} key={worker.id}>\n          <Grid.Column width={4} onClick={()=>props.addPane('employee',worker)} className=\"hover\" >{worker.name.display}</Grid.Column>\n          {/* skills are returned already in columns */}\n          {skills}\n          <Grid.Column width={2}>\n              <Button onClick={()=>removeEmployee(worker)}>Remove</Button>\n          </Grid.Column>\n      </Grid>\n    )\n  })\n  const selectableEmployees = props.employees.filter((employee) => employee.level !== 5 && employee.projectId !== props.info.id)\n  const employeeOptions = selectableEmployees.map((employee,i)=>{\n    return(\n      {\n        key: employee.id,\n        text: employee.name.full + \": \" + employee.skilltext,\n        value: i\n      }\n    )\n  })\n  return (\n    <div>\n      <h2>{props.info.name}</h2>\n      <h3>Status: \n        {props.info.accepted ? \"active\" : \"not accepted\"}\n        {!props.info.accepted ? \n          <React.Fragment>\n            <Button onClick={()=>props.acceptProject(props.info)}>accept</Button>\n            <Button onClick={()=>props.rejectProject(props.info.id)}>reject</Button>\n          </React.Fragment> \n            : \n          \"\"\n        }\n      </h3>\n      <Grid>\n        <Grid.Column width={5} style={{textAlign:'center'}}>\n          Percent Complete\n          <VictoryPie\n            style={{ parent: { maxWidth: \"100%\" } }}\n            data={[\n              { x: \" \", y: props.info.percentComplete },\n              { x: \" \", y: 100-props.info.percentComplete },\n            ]}\n          />\n        </Grid.Column>\n        <Grid.Column width={5} style={{textAlign:'center'}}>\n          Time Remaining\n          <VictoryPie\n            style={{ parent: { maxWidth: \"100%\" } }}\n            data={[\n              { x: \" \", y: props.info.estimatedMonthsToCompletion },\n              { x: \" \", y: props.info.monthsActive },\n            ]}\n          />\n        </Grid.Column>\n      </Grid>\n      <Grid>\n        <Grid.Column width={4}>\n          <Grid.Row>Percent Complete</Grid.Row>\n          <Grid.Row>Productivity</Grid.Row>\n          <Grid.Row>Client Satisifaction</Grid.Row>\n        </Grid.Column>\n        <Grid.Column width={1}>\n          <Grid.Row>{props.info.percentComplete}</Grid.Row>\n          <Grid.Row>{props.info.productivity}%</Grid.Row>\n          <Grid.Row>{props.info.satisfaction}%</Grid.Row>\n        </Grid.Column>\n        <Grid.Column width={4}>\n          <Grid.Row>Est. months</Grid.Row>\n          <Grid.Row>Months left</Grid.Row>\n          <Grid.Row>Budget</Grid.Row>\n          <Grid.Row>Paid In Installments?</Grid.Row>\n        </Grid.Column>\n        <Grid.Column width={1}>\n          <Grid.Row>{props.info.estimatedMonthsToCompletion}</Grid.Row>\n          <Grid.Row>{props.info.monthsToCompletion}</Grid.Row>\n          <Grid.Row>{budget}</Grid.Row>\n          <Grid.Row>{props.info.payInInstallments ? 'yes' : 'no'}</Grid.Row>\n        </Grid.Column>\n      </Grid>\n      <h2>Requirements</h2>\n      <Grid columns={2}>\n        <Grid.Column width={4}>\n          <Grid.Row>Sector</Grid.Row>\n          <Grid.Row>Required:</Grid.Row>\n        </Grid.Column>\n        <Grid.Column width={4}>\n          <Grid.Row>{props.info.sector}</Grid.Row>\n          {required}\n        </Grid.Column>\n        <Grid.Column width={4}>\n          <Grid.Row>Type</Grid.Row>\n          <Grid.Row>Optional:</Grid.Row>\n        </Grid.Column>\n        <Grid.Column width={4}>\n        <Grid.Row>{props.info.type}</Grid.Row>\n        {optional}\n        </Grid.Column>\n      </Grid>\n      <h2>Personnel</h2>\n      <Icon name=\"user\"></Icon>\n      <Dropdown\n          placeholder='Add Employee'\n          fluid\n          selection\n          options={employeeOptions}\n          onChange={addEmployee}\n      />\n      <Grid columns={1}>\n        {workers}\n      </Grid>\n      {!props.info.accepted ? \n          \"\" \n            : \n          <Button onClick={()=>props.withdrawProject(props.info.id)}>withdraw from project</Button>\n      }\n    </div>\n  );\n}\n\nexport default Project;","import React, {Component} from 'react';\n\nimport Email from '../Email';\nimport Tasks from '../Tasks';\nimport Employee from '../Employee';\nimport Project from '../Project';\n\nimport { Menu, Tab, Icon } from 'semantic-ui-react'\nimport '../../App.css';\n\nclass Main extends Component {\n  getPane = (type,info) => {\n    switch(type){\n\n      case 'project':\n        return <Project \n                  {...info} \n                  addPane={this.props.addPane} \n                  acceptProject={this.props.acceptProject} \n                  rejectProject={this.props.rejectProject} \n                  withdrawProject={this.props.withdrawProject} \n                  updateEmployee={this.props.updateEmployee}\n                  employees={this.props.employees}\n                  />\n\n      case 'applicant':\n        return <Employee \n                  {...info} \n                  hireApplicant={this.props.hireApplicant} \n                  addPane={this.props.addPane}\n                />\n\n      case 'employee':\n        return <Employee \n                  {...info} \n                  updateEmployee={this.props.updateEmployee} \n                  updateEmployeeLevel={this.props.updateEmployeeLevel} \n                  fireEmployee={this.props.fireEmployee} \n                  addPane={this.props.addPane} \n                  projects={this.props.projects}\n                />\n\n      case \"email\":\n        return <Email \n                  emails={this.props.emails} \n                  addPane={this.props.addPane} \n                  considerProject={this.props.considerProject}\n                  acceptProject={this.props.acceptProject}\n                  />\n\n      case \"tasks\":\n        return <Tasks \n                  tasks={this.props.tasks} \n                  addPane={this.props.addPane} \n                  resolveTask={this.props.resolveTask}/>\n\n      default:\n        return null\n    }\n  }\n  getPaneName = (info) => {\n    switch(info.type){\n\n      case \"applicant\":\n        return info.info.name.display\n\n      case \"employee\":\n        return info.info.name.display\n\n      case \"project\":\n        return info.info.name\n\n      case \"email\":\n        return 'email (' + this.props.emails.length + ')'\n\n      case \"tasks\":\n        return 'tasks (' + this.props.tasks.length + ')'\n       \n      default:\n        return info.type\n    }\n  }\n  buildPane = (info,i) => {\n    // console.log('building pane',info)\n    const pane = this.getPane(info.type,info)\n    const paneName = this.getPaneName(info)\n    const item = { \n      menuItem: (\n        <Menu.Item key={info.type + \"-\" + info.id} onClick={()=>this.props.updatePane(i)}>\n          {\n            info.pinned ? <Icon name=\"map pin\"></Icon> : ''\n          }\n          {paneName}\n          {\n            info.pinned ? '' : \n            <button onClick={()=>this.props.removePane(i)}>X</button>\n          }\n        </Menu.Item>\n      ),\n      pinned: info.pinned, \n      render: () => <Tab.Pane fluid=\"true\">\n                      {pane}\n                    </Tab.Pane>\n    }\n    return item\n  }\n  render(){\n    // console.log('main props', this.props)\n    const panes = [];\n    for(let i = 0; i < this.props.panes.length; i++){\n      const pane = this.buildPane(this.props.panes[i],i);\n      panes.push(pane);\n    }\n    return (\n        <Tab style={{width:'100%',height:'90vh',backgroundColor:'whitesmoke',overflowX:'scroll'}} panes={panes} activeIndex={this.props.activePane}/>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\n\nconst ModalContext = React.createContext({\n    open: false,\n    openModal: () => {}\n});\n\nexport default ModalContext;","import React from 'react';\n\nimport ModalContext from '../Modal/context'; \nimport PersonalIcon from '../Employee/icon';\n\nimport '../../App.css';\nimport { Tab, Grid, Menu, Icon } from 'semantic-ui-react'\n\nconst SidebarWrapper = (props) => {\n\n  return(\n    <ModalContext.Consumer>\n      {({open,openModal}) => (\n        <Sidebar {...props} open={open} openModal={openModal} />\n      )}\n    </ModalContext.Consumer>\n  )\n}\n\n//sections: employees, project\nfunction Sidebar(props) {\n  // console.log('sidebar props',props)\n  const employees = props.employees.map((employee) => {\n    return(\n      <div key={employee.id} className=\"hover\">\n        <Grid celled onClick={()=>props.addPane('employee',employee)}>\n          <Grid.Row columns={2}  style={{padding:'0'}}>\n              <Grid.Column width={6}>\n                <PersonalIcon icon={employee.icon}/>\n                {employee.name.display}\n                {\n                  employee.level === 5 ? \"*\" : \"\"\n                }\n              </Grid.Column>\n              <Grid.Column width={8}>\n                {employee.title}\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row columns={2} style={{padding:'0'}}>\n              <Grid.Column width={10}>\n                {\n                  !employee.projectId ? '' :\n                  employee.project.shortName\n                }\n              </Grid.Column>\n              <Grid.Column width={1}>\n                {employee.level}\n              </Grid.Column>\n              <Grid.Column width={1}>\n                {employee.stats.happiness}\n              </Grid.Column>\n          </Grid.Row>\n      </Grid>\n      </div>\n    )\n  })\n  const projects = props.projects.map((project) => {\n    if(project.considering || project.accepted){\n      return(\n        <Grid.Row className=\"hover\" columns={4} key={project.id} onClick={()=>props.addPane('project',project)}>\n          <Grid.Column width={7}>{project.name}</Grid.Column>\n          <Grid.Column width={1}>{project.workers.length}</Grid.Column>\n          <Grid.Column width={1}>{project.productivity}%</Grid.Column>\n          <Grid.Column width={1}>{project.monthsToCompletion}</Grid.Column>\n          <Grid.Column width={1}>{project.percentComplete}%</Grid.Column>\n        </Grid.Row>\n      )\n    }\n  })\n  const applicants = props.applicants.map((applicant) => {\n    return(\n      <Grid.Row className=\"hover\" columns={3} key={applicant.id}> \n        <Grid.Column onClick={()=>props.addPane('applicant',applicant)}>\n        {applicant.name.display}\n        </Grid.Column>\n        <Grid.Column onClick={()=>props.addPane('applicant',applicant)}>\n        {applicant.skills}\n        </Grid.Column>\n        <Grid.Column>\n          <button onClick={()=>props.dismissApplicant(applicant.id)} >x</button>\n        </Grid.Column>\n      </Grid.Row>\n    )\n  })\n  const panes = [\n    { menuItem: (<Menu.Item style={{padding: '1vh 1vw'}}>Employees</Menu.Item>), \n      render: () => <Tab.Pane style={{height: '85vh',overflowY:\"scroll\",backgroundColor:'gainsboro'}}>{employees}</Tab.Pane> },\n    { menuItem: (<Menu.Item style={{padding: '1vh 1vw'}}>Applicants</Menu.Item>), \n      render: () => <Tab.Pane style={{height: '85vh',overflowY:\"scroll\",backgroundColor:'gainsboro'}}>\n                        <Grid columns={1}> {applicants}</Grid></Tab.Pane> },\n    { menuItem: (<Menu.Item style={{padding: '1vh 1vw'}}>Projects</Menu.Item>), \n      render: () => \n      <Tab.Pane style={{height: '85vh',overflowY:\"scroll\",backgroundColor:'gainsboro'}}>\n        <Grid columns={1}>\n          <Grid.Row columns={4}>\n            <Grid.Column width={7}>name</Grid.Column>\n            <Grid.Column width={1}><Icon name=\"user\"/></Grid.Column>\n            <Grid.Column width={1}><Icon name=\"fire\"/></Grid.Column>\n            <Grid.Column width={1}><Icon name=\"calendar alternate\"/></Grid.Column>\n            <Grid.Column width={1}><Icon name=\"percent\"/></Grid.Column>\n          </Grid.Row>\n          {projects}\n        </Grid>\n      </Tab.Pane> },\n    { menuItem: (<Menu.Item style={{padding: '1vh 1vw'}}>Jobs</Menu.Item>), \n      render: () => <Tab.Pane style={{height: '85vh',overflowY:\"scroll\",backgroundColor:'gainsboro'}}><Grid columns={1}>jobs</Grid></Tab.Pane> },\n  ]\n  return (\n    <aside>\n      <div style={{backgroundColor:\"white\",height:'14vh',paddingTop:'3vh'}}>\n        <h1 style={{color:\"black\"}}>agency</h1>\n      </div>\n      <Tab panes={panes} /> \n    </aside>\n  );\n}\n\nexport default SidebarWrapper;\n","import React, {Component} from 'react';\nimport {Feed,Input,Label,Button} from 'semantic-ui-react';\n\nclass Message extends Component{\n    constructor(){\n        super();\n        this.state = {\n            open: false,\n            text: '',\n        }\n    }\n    open = () => {\n        this.setState({\n            open: true\n        })\n    }\n    close = () => {\n        this.setState({\n            open: false\n        })\n    }\n    onChange = (e) => {\n        this.setState({\n            text: e.target.value\n        })\n    }\n    onSubmit = () => {\n\n    }\n    render(){\n        const messages = this.props.messages.map((message)=> {\n            return(\n                <div>{message.sender}: {message.text}</div>\n            )\n        })\n        return(\n            <div style={{overflow:\"hidden\"}} className={this.state.open ? 'message message-open': 'message message-closed'}>\n                <div style={{position:'fixed',width:'100%'}}>\n                {\n                    this.state.open ? \n                    <Button onClick={this.close} style={{right:'15px',position:'fixed',padding:'4px'}}>X</Button>\n                    :\n                    <Button onClick={this.open} style={{right:'15px',position:'fixed',padding:'4px'}}>X</Button>\n                }\n                </div>\n                {\n                    !this.state.open ? \"\" :\n                    <React.Fragment>\n                        <Feed style={{height:\"50vh\",marginTop:\"-20vh\", overflowY:\"scroll\", display:'flex',flexDirection:'column',justifyContent:'flex-end'}}>\n                            {messages}\n                        </Feed>\n                        <Input fluid placeholder=\"...\" value={this.state.text} onChange={this.onChange} ></Input>\n                    </React.Fragment>\n                }\n            </div>\n        )\n    }\n}\n\nexport default Message","class Agency{\n    constructor(name,coh, maxSalary, monthlyExpenditures, monthlyProfit, yearsInOperation, startYear, reputation, experience){\n        console.log('agency running');\n        this.name = name ? name : 'Web Brands';\n        this.coh = coh ? coh : 100000;\n        this.maxSalary = maxSalary ? maxSalary : 300000;\n        this.monthlyExpenditures = monthlyExpenditures ? monthlyExpenditures : 300000;\n        this.monthlyProfit = monthlyProfit ? monthlyProfit : 100000;\n        this.numActiveProjects = 3;\n        this.yearsInOperation = yearsInOperation ? yearsInOperation : 1;\n        this.startYear = startYear ? startYear: new Date().getFullYear() - 1 ;\n        this.reputation = reputation ? reputation : 50;\n        this.experience = experience ? experience : 0;\n        this.completedProjects = 0;\n        //date founded\n    }\n    calculateAgencyParameters = function(employees,projects){\n        let totalSalaries = 0;\n        let totalIncome = 0;\n        for(let i = 0; i < employees.length; i++){\n            totalSalaries+=employees[i].salary;\n        }\n        for(let i = 0; i < projects.length; i++){\n            if(projects[i].accepted){\n                const budget = projects[i].budget;\n                const monthes = projects[i].estimatedMonthsToCompletion;\n                totalIncome+= Math.floor(budget/monthes);\n            }\n        }\n        //increase overhead based on age of agency/number of employees\n        const overhead = employees.length * this.yearsInOperation;\n        const monthlySalaries = Math.floor(totalSalaries/12);\n        this.monthlyExpenditures = monthlySalaries + Math.floor(overhead/12);\n        this.monthlyProfit = Math.floor(totalIncome);\n    }\n    update(profit){\n        if(!profit){\n            //if there's no profit, this is an AI agency, which will use update randomly\n            this.autoUpdate();\n        } else {\n            //if there's a profit, this agency belongs to a player.\n            this.coh = this.coh + profit - this.monthlyExpenditures;\n        }\n    }\n    autoUpdate(){\n\n    }\n    completeProject(project){\n        this.completedProjects += 1;\n        \n    }\n}\n\nexport default Agency","import Agency from './Agency';\nimport Helpers from './Helpers';\n\nfunction RandomAgency(){\n    this.icons = ['compass','coffee','cut','sitemap']\n    this.helpers = new Helpers();\n}\n\nRandomAgency.prototype.generateRandomAgency = function(isFake){\n    const name = this.randomAgencyName();\n    // const icon = this.helpers.randomFromArray(this.icons);\n    const agency = new Agency(name);\n    return agency\n}\n\nRandomAgency.prototype.randomAgencyName = function(){\n    const firstWords = [\"Inspire\", \"Revolution\",\"Energize\",\"Creative\"];\n    const secondWords = [\"Digital\", \"Software\", \"Intelligence\",\"Solutions\"];\n    const r = Math.random();\n    const first = this.helpers.RandomFromArray(firstWords);\n    const second = this.helpers.RandomFromArray(secondWords);\n    if(r < .5){\n        return first + \" \" + second\n    } else {\n        return second + \" \" + first\n    }\n}\n\nexport default RandomAgency","class Employee{\n    constructor(id, name,icon, gender,age,level, title,focus,skills, skillset, stats, salary,project){\n        this.id = id;\n        this.name = name;\n        this.icon = icon;\n        this.gender = gender;\n        this.age = age;\n        this.level = level;\n        this.title = title;\n        this.focus = focus;\n        this.skills = skills;\n        this.skillset = skillset;\n        this.stats = stats;\n        this.salary = salary;\n        this.quit = false;\n        this.project = project;\n        this.projectId = project ? project.id : null;\n        this.match = null;\n        this.problems = 0;\n        this.problems = [];\n    }\n    update(){\n        console.log('updating employee!');\n        const r = Math.random();\n        if(r < .1){\n            this.stats.happiness -= 1;\n        } else if (r > .9){\n            this.stats.happiness += 1;\n        }\n        const r2 = Math.random();\n        if(r2 < .1){\n            this.stats.productivity -= 1;\n        } else if (r > .9){\n            this.stats.productivity += 1;\n        }\n        if(this.stats.happiness < 5 || this.problems > 5){\n            this.quit = true;\n        }\n    }\n    promote(){\n        this.level += 1;\n        //title will be change back in content\n        this.stats.happiness = this.stats.happiness + 10 >= 100 ? 100 : this.stats.happiness + 10;\n        this.stats.productivity = this.stats.productivity + 1 >= 10 ? 10 : this.stats.productivity + 1;\n    }\n    demote(){\n        this.level -= 1;\n        //title will be change back in content\n        this.stats.happiness = this.stats.happiness - 10 <= 0 ? 0 : this.stats.happiness - 10;\n        this.stats.productivity = this.stats.productivity - 1 <= 0 ? 0 : this.stats.productivity - 1;\n    }\n    raiseSalary(){\n        this.salary += 10000;\n        //title will be change back in content\n        this.stats.happiness = this.stats.happiness + 10 >= 100 ? 100 : this.stats.happiness + 10;\n        this.stats.productivity = this.stats.productivity + 1 >= 10 ? 10 : this.stats.productivity + 1;\n    }\n    lowerSalary(){\n        this.salary -= 10000;\n        //title will be change back in content\n        this.stats.happiness = this.stats.happiness - 10 <= 0 ? 0 : this.stats.happiness - 10;\n        this.stats.productivity = this.stats.productivity - 1 <= 0 ? 0 : this.stats.productivity - 1;\n    }\n    updateSkills(projectSkills){\n\n    }\n    printInfo(){\n        console.log(\"employee info\");\n        console.log(this.name);\n        console.log('gender:',this.gender);\n        console.log('age:',this.age);\n        console.log('level:',this.level);\n        console.log('job', this.job);\n        console.log('stats:', this.stats)\n        console.log('salary', \"$\"+ this.salary);\n    }\n}\n\nexport default Employee","function MatchEmployeeToProject(employee,project){\n    let matchScore = 0;\n    const employeeSkills = Object.keys(employee.skillset);\n    for(let i = 0; i < employeeSkills.length; i++){\n        try{\n            if(project.requirements.required.includes(employeeSkills[i])){\n                matchScore+=1;\n            }\n            if(project.requirements.optional.includes(employeeSkills[i])){\n                matchScore+=.5;\n            }\n        }catch(e){\n            return 0\n        }\n        \n    }\n    return matchScore\n}\n\nexport default MatchEmployeeToProject","import Employee from './Employee';\nimport MatchEmployeeToProject from './MatchEmployeeToProject';\n\nfunction RandomEmployee(){\n    this.employeeId = 100000001;\n    this.maxLeaders = 2;\n    this.currentLeaders = 0;\n    this.usedNames = [];\n    this.femaleIcons = ['female-icon-1'];\n    this.maleIcons = ['male-icon-1'];\n    this.neutralIcons = ['male-icon-1'];\n}\n\nRandomEmployee.prototype.generateStartEmployees = function(numEmployees, numLeaders, startProjects){\n    console.log('generating start employees');\n    console.log(startProjects);\n    //remove projects that aren't accepted from start projects\n    startProjects = startProjects.filter((project)=> project.accepted)\n    const employeeStats = {\n                            productivity: 0,\n                            happiness: 0,\n                            salary: 0,\n                          }\n    const startEmployees = [];\n    //generate random leader and add their stats to initial employee stats\n    for(let i = 0; i < numLeaders; i++){ \n        const employee = this.generateRandomEmployee(false,null,5);\n        employeeStats.productivity += employee.stats.productivity;\n        employeeStats.happiness += employee.stats.happiness;\n        employeeStats.salary += employee.salary;\n        startEmployees.push(employee);\n    }\n    //generate start employees\n    for(let i = 0; i < numEmployees; i++){\n        //choose project at random from start projects\n        //MTC this can be better -- use modulus to equally divide employees into projects\n        const project = this.randomFromArray(startProjects);\n        //generate new employee using that project and add their stats to initial employee stats\n        const employee = this.generateRandomEmployee(false,project);\n        employeeStats.productivity += employee.stats.productivity;\n        employeeStats.happiness += employee.stats.happiness;\n        employeeStats.salary += employee.salary;\n        const match = MatchEmployeeToProject(employee,project);\n        employee.match = match;\n        //add employee to project's workers array\n        project.workers.push(employee);\n        project.calculateProductivity();\n        //add to employee array\n        startEmployees.push(employee);\n    }\n    //average intial employee stats\n    for(let i in employeeStats){\n        employeeStats[i] = Math.floor(employeeStats[i]/(numEmployees))\n    }\n    return {\n        employees: startEmployees,\n        employeeStats: employeeStats,\n        startProjects: startProjects\n    }\n}\n\nRandomEmployee.prototype.generateEmployeeID = function(){\n    const id = this.employeeId;\n    this.employeeId += 1;\n    return id\n}\n\nRandomEmployee.prototype.generateRandomEmployee = function(applicant, project, positionLevel){\n    // console.log(\"generating random employee\");\n    //generate ids for start employees only. Employees usually recieve id on hire.\n    const id = !applicant ? this.generateEmployeeID() : null;\n    //set random employee properties\n    const gender = this.randomGender();\n    const icon = gender === \"male\" ? this.randomFromArray(this.maleIcons) : gender === \"female\" ? this.randomFromArray(this.femaleIcons) : this.randomFromArray(this.neutralIcons);\n    const name = this.randomName(gender);\n    const age = this.randomBetweenInts(23,60);\n    // this can be cleaned up now that the leaders are created seperately\n    const maxLevel = this.currentLeaders >= 2 ? 4 : 5;\n    const level = positionLevel ? positionLevel : this.randomBetweenInts(1,maxLevel);\n    if(level === 3){\n        this.currentLeaders+=1;\n    }\n    //check employees' skills against project requirements\n\n    //generate random employee properties baded on level\n    const skillset = this.randomSkillset(level);\n    const stats = this.randomStats();\n    const salary = this.randomBetweenInts(4,4+(level*2)) * 10000;\n    //create and return new employee\n    const employee = new Employee(id,name,icon,gender,age,level,skillset.title,skillset.focus,skillset.skills, skillset.skillSet,stats, salary,project);\n    return employee\n}\n\nRandomEmployee.prototype.randomSkillset = function(level){\n    //skill areas and job title\n    const skillsets = {\n        ux: ['graphic designer','ux designer','ui designer'],\n        frontend: ['jr frontend dev','frontend dev','sr frontend dev'],\n        backend: ['jr backend dev','backend dev','sr backend dev'],\n        datascience: ['jr data analyst','data analyst','sr data analyst'],\n        management: ['cfo','cto','ceo']\n    }\n    //give all players two focuses. Only the first will be visible to the player.\n    const focii = Object.keys(skillsets);\n    // const fociiWithoutManagerial = focii.pop();\n    //All leaders aka level 5 employees focus on management.\n    const focusOne = level === 5 ? 'management' : this.randomFromArray(focii);\n    const focusTwo = this.randomFromArray(focii);\n    //select a bunch of random skills from those two focuses\n    const skillsSelection = this.randomSkills(focusOne,focusTwo);\n    const skills = [];\n    const skillSet = {};\n    for(let i = 0; i < skillsSelection.length; i++){\n        //put the first three items into a skills array, which will be the only skills visible to the player\n        if(i<=2){\n            skills.push(skillsSelection[i]);\n        }\n        //add all skills to the skillset and give them a random starting value, limited by the employees level\n        skillSet[skillsSelection[i]] = this.randomBetweenInts(0,5+level);\n    }\n    //get the employees title based on focus/level\n    const title = level === 5 ? this.randomFromArray(skillsets[focusOne]) : skillsets[focusOne][level-1];\n    return {\n        focus: focusOne,\n        skills: skills,\n        skillSet: skillSet,\n        title: title\n    }\n}\n\nRandomEmployee.prototype.randomSkills = function(focusOne,focusTwo){\n    const skills = {\n        ux: ['design','css','wireframing'],\n        frontend: ['css','html', 'jQuery','javascript'],\n        backend: ['javascript','express','python','sql'],\n        datascience: ['python','matplotlib','tensorflow'],\n        management: ['agile','kanban','motivation'],\n    }\n    let skillset = [];\n    if(focusOne !== focusTwo){\n        skillset.push(skills[focusOne][0])\n        skillset.push(skills[focusOne][1])\n        skillset.push(skills[focusOne][2])\n        skillset.push(skills[focusTwo][0])\n    } else {\n        skillset = skills[focusOne]\n    }\n    return skillset\n}\n\nRandomEmployee.prototype.randomStats = function(){\n    const stats = {\n        productivity: this.randomBetweenInts(1,101),\n        happiness: this.randomBetweenInts(1,101),\n        creativity: this.randomBetweenInts(1,101),\n        accuracy: this.randomBetweenInts(1,101),\n        curiosity: this.randomBetweenInts(1,101),\n        dedication: this.randomBetweenInts(1,101),\n    }\n    return stats\n}\n\nRandomEmployee.prototype.randomGender = function(){\n    const genders = ['male', 'female', 'neutral'];\n    const gender = this.randomFromArray(genders);\n    return gender\n}\n\nRandomEmployee.prototype.randomName = function(gender){\n    const first_name_male = ['Scott','Trevor','Sanjay','John','Julio','Adam','Bill','Dave','Deangelo','Eric'];\n    const first_name_female = ['Jill','Nancy','Maria','Ann','Sara','Julia','Bella','Simone','Angela','Kendra','Erica'];\n    const last_names = ['Jones','Paul','Smith','Johnson','Gupta','Sanchez','Saul','Lopez','Gupta','Wang','Devi','Liu','Chen','Khan','Ali','Johannes','Nguyen','Kim','Sato'];\n    let first_name;\n    if(gender === \"male\"){\n        first_name = this.randomFromArray(first_name_male);\n    } else if (gender === \"female\"){\n        first_name = this.randomFromArray(first_name_female);\n    } else {\n        const combine = first_name_male.concat(first_name_female);\n        first_name = this.randomFromArray(combine);\n    }\n    const lastName = this.randomFromArray(last_names);\n    return {\n            first:first_name, \n            last: lastName, \n            full:first_name + \" \" + lastName,\n            display: first_name.charAt(0) + \". \" + lastName,\n            short: first_name + \" \" + lastName.charAt(0) + \".\",\n            email: first_name.charAt(0) + lastName + '@'\n        }\n}\n\nRandomEmployee.prototype.randomFromArray = function(arr){\n    return arr[Math.floor(Math.random()*arr.length)]\n}\n\nRandomEmployee.prototype.randomBetweenInts = function(start,end){\n    return Math.floor(Math.random()*(end-start)) + start\n}\n\nexport default RandomEmployee","class Company{\n    constructor(name, shortName, sector, icon, rep){\n        this.name = name;\n        this.shortName = shortName;\n        this.sector = sector;\n        this.icon = icon;\n        this.activeProject = null;\n        this.completedProjects = 0;\n        this.satisfaction = 50;\n        this.quit = false;\n        this.rep = rep;\n    }\n    completeProject(){\n        this.completedProjects+= 1;\n        this.activeProject = null;\n    }\n    cancelProject(){\n        this.activeProject = null;\n        if(this.satisfaction === 0){\n            this.quit = true;\n        }\n    }\n}\n\nexport default Company","\nimport RandomEmployee from './RandomEmployee';\nimport Company from './Company';\n\nfunction RandomCompany(){\n    this.usedNames = [];\n    this.icons = ['arrows alternate','chart line','cloud download','location arrow','random',\n                  'share square', 'bullhorn', 'certificate',\n                ]\n    this.randomEmployee = new RandomEmployee();\n}\n\nRandomCompany.prototype.generateRandomCompany = function(){\n    const sectors = Object.keys(this.projectSectors);\n    const sector = this.randomFromArray(sectors);\n    const icon = this.randomFromArray(this.icons)\n    const names = this.randomCompanyName();\n    const rep = this.randomEmployee.generateRandomEmployee(false,null);\n    const company = new Company(names.name, names.shortName,sector,icon,rep)\n    return company\n}\n\nRandomCompany.prototype.randomCompanyName = function(){\n    const firstWords = [\"Inspire\", \"Revolution\", \"Domain\"];\n    const secondWords = [\"Digital\", \"Software\", \"Intelligence\"];\n    const r = Math.random();\n    const first = this.randomFromArray(firstWords);\n    const second = this.randomFromArray(secondWords);\n    const short = first[0] + second[0];\n    let name;\n    if(r < .5){\n        name = first + \" \" + second\n    } else {\n        name = second + \" \" + first\n    }\n    return {\n        name: name,\n        shortName: short,\n    }\n}\n\nRandomCompany.prototype.projectSectors = {\n    'healthcare': {\n        minCost: 2,\n        maxCost: 5,\n        minDesign: 2,\n        maxDesign: 5,\n        firstwords: [],\n        secondwords: [],\n    },\n    'finance': {\n        minCost: 5,\n        maxCost: 10,\n        minDesign: 2,\n        maxDesign: 5,\n        firstwords: [],\n        secondwords: [],\n    },\n    'housing': {\n        minCost: 2,\n        maxCost: 5,\n        minDesign: 2,\n        maxDesign: 5,\n        firstwords: [],\n        secondwords: [],\n    },\n    'local business': {\n        minCost: 1,\n        maxCost: 3,\n        minDesign: 2,\n        maxDesign: 5,\n        firstwords: [],\n        secondwords: [],\n    },\n}\n\nRandomCompany.prototype.randomFromArray = function(arr){\n    return arr[Math.floor(Math.random()*arr.length)]\n}\n\nexport default RandomCompany","\nclass Project{\n    constructor(id, company, name, shortName, sector,type, accepted, requirements,budget, estimatedMonthsToCompletion,monthsActive,percentComplete){\n        this.id = id;\n        this.company = company;\n        this.name = name;\n        this.shortName = shortName;\n        this.sector = sector;\n        this.type = type;\n        this.accepted = accepted;\n        this.considering = accepted;\n        this.requirements = requirements;\n        this.budget = budget;\n        this.totalPaid = 0;\n        this.payInInstallments = true;\n        this.estimatedMonthsToCompletion = estimatedMonthsToCompletion;\n        this.monthsToCompletion = estimatedMonthsToCompletion;\n        this.monthsActive = monthsActive ? monthsActive : 0;\n        this.percentComplete = percentComplete ? percentComplete : 0;\n        this.onTime = true;\n        this.workers = [];\n        this.productivity = 0;\n        this.complete = false;\n        this.satisfaction = 100-(this.estimatedMonthsToCompletion-this.monthsActive);    \n    }\n    update(){\n        console.log('updating project!');\n        let payment = 0;\n        console.log('monthes active',this.monthsActive);\n        this.monthsActive += 1;\n        this.calculateProductivity();\n        console.log(this.percentComplete);\n        if(this.monthsActive >= this.estimatedMonthsToCompletion || this.percentComplete >= 100){\n            if(this.percentComplete === 100){\n                console.log('project complete')\n                this.complete = true;\n                if(this.payInInstallments){\n                    payment = Math.floor(this.budget/this.estimatedMonthsToCompletion)\n                } else {\n                    payment = this.budget;\n                }\n            } else {\n                console.log(\"you're still not done!?!?!\");\n                this.satisfaction -= 10;\n            }\n        } else {\n            if(this.payInInstallments){\n                console.log('paying in installments!')\n                payment = Math.floor(this.budget/this.estimatedMonthsToCompletion);\n                this.satisfaction += 1;\n            }\n        }\n        return payment\n    }\n    addWorker(worker){\n        this.workers.push(worker);\n        this.calculateProductivity();\n    }\n    removeWorker(worker){\n        this.workers.filter((w) => worker.id !== w.id)\n        this.calculateProductivity();\n    }\n    calculateProductivity(){\n        let productivity = 0;\n        for(let i = 0; i < this.workers.length; i++){\n            productivity += this.workers[i].stats.productivity/10 * this.workers[i].match ;\n            }\n        productivity = Math.floor(productivity/this.workers.length);\n        this.percentComplete = this.percentComplete + productivity;\n        this.productivity = productivity;\n        const onTime = (this.estimatedMonthsToCompletion-this.monthsActive)/productivity;\n        console.log('on time calc',onTime);\n        this.onTime = onTime;\n    }\n    printInfo(){\n        console.log(\"project info\");\n        console.log(this.company);\n        console.log(this.name);\n        console.log('sector',this.sector);\n        console.log('type',this.type);\n        console.log('requirements',this.requirements);\n        console.log('budget',this.budget);\n        console.log('estimatedMonthsToCompletion',this.estimatedMonthsToCompletion);\n    }\n}\n\nexport default Project","\nimport Project from '../Scripts/Project';\n\nfunction RandomProject(){\n    this.projectId = 101;\n}\n\nRandomProject.prototype.generateRandomProject = function(company, isStartProject) {\n    // console.log('generating random project');\n    // console.log('company',company);\n    const id = this.projectId;\n    this.projectId += 1;\n    const sectors = Object.keys(this.projectSectors);\n    const sector = this.randomFromArray(sectors);\n    const types = Object.keys(this.projectTypes);\n    const type = this.randomFromArray(types);\n    const name = company.name + \" \" + type;\n    const shortName = company.shortName + \" \" + type;\n    const requirements = this.projectTypes[type];\n    const estimatedMonthsToCompletion = isStartProject ? this.randomBetweenInts(4,8): this.randomBetweenInts(6,18); \n    const monthsActive = isStartProject ? Math.floor(this.randomBetweenInts(0,estimatedMonthsToCompletion-2)): 0;\n    const percentComplete = Math.floor(monthsActive/estimatedMonthsToCompletion*100);\n    const budget = this.randomBetweenInts(5,250);\n    const adjustedBudget = budget * 1000;\n    const project = new Project(id, company, name,shortName, sector,type, isStartProject, requirements, adjustedBudget, estimatedMonthsToCompletion,monthsActive,percentComplete);\n    return project\n}\n\nRandomProject.prototype.projectSectors = {\n    'healthcare': {\n        minCost: 2,\n        maxCost: 5,\n        minDesign: 2,\n        maxDesign: 5,\n        firstwords: [],\n        secondwords: [],\n    },\n    'finance': {\n        minCost: 5,\n        maxCost: 10,\n        minDesign: 2,\n        maxDesign: 5,\n        firstwords: [],\n        secondwords: [],\n    },\n    'housing': {\n        minCost: 2,\n        maxCost: 5,\n        minDesign: 2,\n        maxDesign: 5,\n        firstwords: [],\n        secondwords: [],\n    },\n    'local business': {\n        minCost: 1,\n        maxCost: 3,\n        minDesign: 2,\n        maxDesign: 5,\n        firstwords: [],\n        secondwords: [],\n    },\n}\n\nRandomProject.prototype.projectTypes = {\n    'website': {\n        required:['html','css','javascript'],\n        optional:['jQuery']\n    },\n    'web app': {\n        required: ['html','css','javascript'],\n        optional:['jQuery']\n    },\n    'mobile app': {\n        required: ['html','css','javascript'],\n        optional: ['jQuery']\n    },\n    'data platform': {\n        required:['python','sql','javascript'],\n        optional: ['jQuery']\n    },\n}\n\nRandomProject.prototype.randomFromArray = function(arr){\n    return arr[Math.floor(Math.random()*arr.length)]\n}\n\nRandomProject.prototype.randomBetweenInts = function(start,end){\n    return Math.floor(Math.random()*(end-start)) + start\n}\n\nexport default RandomProject","import RandomAgency from './RandomAgency';\nimport RandomCompany from './RandomCompany';\nimport RandomProject from './RandomProject';\n\nfunction Industry(){\n    this.clients = [];\n    this.competitors = [];\n    this.startCompetitors = 2;\n    this.maxCompetitors = 5;\n    this.randomCompany = new RandomCompany();\n    this.randomAgency = new RandomAgency();\n    this.randomProject = new RandomProject();\n    this.awake();\n}\n\nIndustry.prototype.awake = function(){\n    for(let i =0; i < this.startCompetitors; i++){\n        const competitor = this.randomAgency.generateRandomAgency();\n        this.competitors.push(competitor);\n    }\n    for(let i =0; i < this.startCompetitors; i++){\n        const client = this.randomCompany.generateRandomCompany();\n        this.clients.push(client);\n    }\n}\nIndustry.prototype.monthlyUpdate = function(){\n    for(let i = 0; i < this.competitors.length; i++){\n        //check if competitor has failed\n        //otherwise update competitors\n    }\n}\nIndustry.prototype.newProject = function(isStartProject){\n    const r = Math.random();\n    let client;\n    if(r < .2 || !this.competitors.length){\n        client = this.randomCompany.generateRandomCompany();\n        this.clients.push(client);\n    } else {\n        client = this.clients[Math.floor(Math.random()*this.clients.length)]\n    }\n    const project = this.randomProject.generateRandomProject(client,isStartProject);\n    return project\n}\n\nexport default Industry","import { func } from \"prop-types\";\n\nfunction TaskManager(){\n    console.log('task manager running');\n    this.tasks = [\"hire applicant\"];\n}\n\nTaskManager.prototype.addTask = function(task){\n    console.log('adding task')\n    this.tasks.push(task);\n    return this.tasks\n}  \n\nTaskManager.prototype.removeTask = function(i){\n    console.log('removing task');\n    this.tasks.splice(i,1);\n    return this.tasks\n}\n\nexport default TaskManager","import Helpers from './Helpers';\n\nfunction RandomEmail(){\n    this.helpers = new Helpers();\n}\n\nRandomEmail.prototype.generateRandomEmail = function(boss,employee1,employee2){\n    //emails from the boss get priority\n    const r = Math.random();\n    if(r < .1){\n        if(boss.stats.happiness > 60 || boss.stats.happiness < 30){\n            return this.bossEmail(boss)\n        } else {\n            if(employee1.stats.happiness > 80){\n                //MTC needs to be replaced!\n                return this.happyEmail(employee1);\n            } else if (employee1.stats.happiness < 40) {\n                return this.complaintEmail(employee1,employee2);\n            } else {\n                return this.requestEmail(employee1);\n            }\n        }\n    } else if (r<.5 && r > .1 ) {\n        return this.generateEmail(null,employee1,employee2);\n    } else {\n        return this.generateEmail(null,employee1,employee2);\n    }\n}\n\nRandomEmail.prototype.generateEmail = function(type,employee1,employee2){\n    let text;\n    let subject = 'Hello';\n    let sender = employee1;\n    //bring in time\n    const time =  new Date().toLocaleString();\n    switch(type){\n\n        case 'start':\n            text = 'Hey, thanks for taking over the personnel decisions. Sure it shouldn\\'t be too hard!';\n            break \n\n        case 'applicant':\n            return this.applicantEmail(employee1)\n\n        case 'project':\n            return this.projectEmail(employee1,employee2)\n\n        case 'complete':\n            return this.completeEmail(employee1,employee2)\n\n        case 'welcome':\n            return this.welcomeEmail(employee1);\n\n        case 'quit':\n            return this.quitEmail(employee1);\n\n        default: \n            return this.junkEmail(employee1); \n    }\n    const email = {\n        subject: subject,\n        text: text,\n        sender: sender,\n        time: time,\n        read: false\n    }\n    return email\n}\n\nRandomEmail.prototype.junkEmail = function(employee){\n    const junkSubject = [\"Happy Birthday to \" + employee.name.first,'Hike this weekend'];\n    const junkBody = [\"Hey, it's \" + employee.name.display + \" 's birthday\",\"Hey, anybody up for a hike this weekend?\"];\n    const email = {\n        subject: this.helpers.RandomFromArray(junkSubject),\n        text: this.helpers.RandomFromArray(junkBody),\n        sender: employee,\n        time: new Date().toLocaleString(),\n        read: false\n    }\n    return email;\n}\n\nRandomEmail.prototype.requestEmail = function(employee){\n    const requestSubject = ['Request','Please help',\"Just a thought\"];\n    const requestBody = [\"Could we get a new coffee machine?\",\"I need some time off\"];\n    const email = {\n        subject: this.helpers.RandomFromArray(requestSubject),\n        text: this.helpers.RandomFromArray(requestBody),\n        sender: employee,\n        time: new Date().toLocaleString(),\n        read: false,\n        accept: true\n    }\n    return email;\n}\n\nRandomEmail.prototype.complaintEmail = function(employee1, employee2){\n    const complaintSubject = [\"A complaint\", \"I'm not happy\", \"We need to talk\"];\n    const complaintBody = [\"I don't like sitting next to \" + employee2.name.full + \". Can I move desks?\"];\n    const complaintTypes = ['change position']\n    const email = {\n        subject: this.helpers.RandomFromArray(complaintSubject),\n        text: this.helpers.RandomFromArray(complaintBody),\n        sender: employee1,\n        time: new Date().toLocaleString(),\n        read: false,\n        accept: true\n    }\n    return email;\n}\n\nRandomEmail.prototype.applicantEmail = function(employee){\n    const applicantSubject = [\"Application\", 'Open Position','Your job posting','I need a job'];\n    const applicantBody = [\n        \"Hello, my name is \" + employee.name.display + \" and I would like to apply for a position at your company. Attached, pleased find my resume and cover letter\",\n        \"Hi there, I saw your post advertising and open position. Thanks for considering me!\",\n        \"Regards, attached please find my resume for your positing of an open position. Thank you for your consideration\"\n    ];\n    const email = {\n        subject: this.helpers.RandomFromArray(applicantSubject),\n        text: this.helpers.RandomFromArray(applicantBody),\n        sender: employee,\n        time: new Date().toLocaleString(),\n        read: false,\n        consider: true,\n        accept: false,\n        target: employee\n    }\n    return email;\n}\n\nRandomEmail.prototype.projectEmail = function(project){\n    const email = {\n        subject: \"New project for \" + project.company.name,\n        text: \"Does your company have the bandwidth to complete a new \" + project.type + \" for \" +project.company.name + \"?\",\n        sender: project.company.rep,\n        time: new Date().toLocaleString(),\n        read: false,\n        consider: true,\n        target: project\n    }\n    return email;\n}\n\nRandomEmail.prototype.completeEmail = function(project){\n    const email = {\n        subject: \"Project complete for \" + project.company.name,\n        text: \"Congratulations on finishing the \" + project.type + \" for \" +project.company.name + \"?\",\n        sender: project.company.rep,\n        time: new Date().toLocaleString(),\n        read: false,\n        consider: true,\n        target: project\n    }\n    return email;\n}\n\nRandomEmail.prototype.welcomeEmail = function(employee){\n    const email = {\n        subject: 'Thanks again',\n        text: \"Hey, thanks for taking over the personnel decisions. Sure it shouldn't be too hard!\",\n        sender: employee,\n        time: new Date().toLocaleString(),\n        read: false\n    }\n    return email;\n}\n\nRandomEmail.prototype.quitEmail = function(employee){\n    const quitSubject = ['I quit',\"I'm out\",'Notice of resignation',\"Can't take it\"]\n    const quitBody = [\n        \"I quit. Sincerely, \" + employee.name.display,\n        \"Sorry, I just hate it here. I quit. \",\n    ];\n    const email = {\n        subject: this.helpers.RandomFromArray(quitSubject),\n        text: this.helpers.RandomFromArray(quitBody),\n        sender: employee,\n        time: new Date().toLocaleString(),\n        read: false\n    }\n    return email;\n}\n\nRandomEmail.prototype.happyEmail = function(employee){\n    const happySubject = [\"Great news\",'Announcement',\"Let's celebrate\"];\n    const happyBody = [\n        \"Great news!, \" + employee.name.display + ' is having a baby!', \n    ];\n    const email = {\n        subject: this.helpers.RandomFromArray(happySubject),\n        text: this.helpers.RandomFromArray(happyBody),\n        sender: employee,\n        time: new Date().toLocaleString(),\n        read: false\n    }\n    return email;\n}\n\nRandomEmail.prototype.bossEmail = function(boss){\n    const bossSubject = [\"I'm not happy\",\"Things are going great\"];\n    const bossBody = [\n        \"Boss email\",\n    ];\n    const email = {\n        subject: this.helpers.RandomFromArray(bossSubject),\n        text: this.helpers.RandomFromArray(bossBody),\n        sender: boss,\n        time: new Date().toLocaleString(),\n        read: false\n    }\n    return email;\n}\n\nRandomEmail.prototype.fireEmail = function(boss){\n    const bossSubject = [\"This isn't working out\"];\n    const bossBody = [\n        \"Sorry things didn't work out, but I think you'll be happier at another company.\",\n    ];\n    const email = {\n        subject: this.helpers.RandomFromArray(bossSubject),\n        text: this.helpers.RandomFromArray(bossBody),\n        sender: boss,\n        time: new Date().toLocaleString(),\n        read: false\n    }\n    return email;\n}\n\nexport default RandomEmail","import Helpers from './Helpers';\n\nfunction RandomMessage(){\n    console.log('random message running');\n    this.helpers = new Helpers();\n}\n\nRandomMessage.prototype.generateRandomMessage = function(boss,employee1,employee2){\n    //emails from the boss get priority\n    if(boss.stats.happiness > 60 || boss.stats.happiness < 30){\n        return this.bossEmail()\n    } else {\n        if(employee1.stats.happiness > 80){\n\n        }\n    }\n}\n\nRandomMessage.prototype.generateMessage = function(type,time,employee1,employee2){\n    switch(type){\n\n        default: \n            return this.junkMessage(time,employee1); \n    }\n}\n\nRandomMessage.prototype.junkMessage = function(time,employee){\n    const junkMessages = [\"Hey guys there's cake in the break room\", \"Anyone have a spare phone charger?\",\n                          \"I found someone's phone charger\", \"Anyone up for a hike this weekend?\", \"Who's got spare bandwidth?\"\n                         ];\n    const text = this.helpers.RandomFromArray(junkMessages);\n    const message = this.message(employee.name.display,text,time,false);\n    return message\n}\n\nRandomMessage.prototype.message = function(sender,text,time,starred){\n    return {\n        sender: sender,\n        text: text,\n        time: time,\n        starred: starred\n    }\n}\n\n\n\n\n\nexport default RandomMessage","import React, {Component} from 'react';\n\nimport Header from '../Header';\nimport Main from '../Main';\nimport Sidebar from '../Sidebar';\nimport Message from '../Message';\n\nimport Industry from '../../Scripts/Industry';\nimport Agency from '../../Scripts/Agency';\nimport TaskManager from '../../Scripts/TaskManagers';\nimport RandomEmployee from '../../Scripts/RandomEmployee';\nimport RandomProject from '../../Scripts/RandomProject';\nimport RandomEmail from '../../Scripts/RandomEmail';\nimport RandomMessage from '../../Scripts/RandomMessage';\nimport Helpers from '../../Scripts/Helpers';\n\nimport '../../App.css';\n\n\nclass Content extends Component {\n  constructor(){\n    super();\n    this.state = {\n      //temp fix\n      fired: false,\n      industry: new Industry(),\n      agency: new Agency(),\n      sidebarRight: true,\n      projects: [],\n      totalPositions: 20,\n      employees: [],\n      employeeStats: {\n        productivity: 0,\n        happiness: 0,\n        salary: 0,\n      },\n      applicants: [],\n      tasks: [],\n      emails: [],\n      messages: [],\n      hour: 1,\n      day: 29,\n      month: 1,\n      year: 0,\n      startYear: null,\n      hourLength: 750,\n      timeRunning: false,\n      activePane: 0,\n      panes: [\n        {type:'email',pinned:true},\n        {type:'tasks',pinned:true}\n      ],\n      updateParams: {\n        emailFrequency: .15,\n        projectFrequency: .05,\n      },\n    }\n    this.taskManager = new TaskManager();\n    this.randomEmployeeGenerator = new RandomEmployee();\n    this.randomProjectGenerator = new RandomProject();\n    this.randomEmailGenerator = new RandomEmail();\n    this.randomMessageGenerator = new RandomMessage();\n    this.helpers = new Helpers();\n  }\n  componentDidMount(){\n    this.start();\n  }\n  start = (numStartEmployees, numStartProjects) => {\n    console.log(\"starting game\");\n    const industry = new Industry();\n    const agency = new Agency();\n    const startProjects = [];\n    const startApplicants = [];\n    const startEmails = [];\n\n    const newProject = industry.newProject(false);\n    startProjects.push(newProject);\n    const newProjectEmail = this.randomEmailGenerator.generateEmail('project',newProject);\n    startEmails.push(newProjectEmail);\n\n    numStartProjects = numStartProjects ? numStartProjects : 3;\n    for(let i = 0 ; i < numStartProjects; i ++){\n      const applicant = this.randomEmployeeGenerator.generateRandomEmployee();\n      startApplicants.push(applicant);\n      const appEmail = this.randomEmailGenerator.generateEmail('applicant',applicant);\n      startEmails.push(appEmail);\n      const startProject = industry.newProject(true);\n      startProjects.push(startProject);\n    }\n    \n    \n\n    const startEmployees = this.randomEmployeeGenerator.generateStartEmployees(7,1,startProjects);\n    const sortedEmployees = this.sortEmployees(startEmployees.employees);\n    const welcomeEmail = this.randomEmailGenerator.generateEmail('start',sortedEmployees[0]);\n\n    //update agency income/expenses based on employees/projects\n    agency.calculateAgencyParameters(startEmployees.employees,startProjects);\n\n    const startYear = new Date().getFullYear();\n\n    this.setState({\n      industry: industry,\n      agency: agency,\n      employees: sortedEmployees,\n      employeeStats: startEmployees.employeeStats,\n      projects: startEmployees.startProjects,\n      applicants: startApplicants,\n      emails: [...startEmails,welcomeEmail],\n      tasks: ['hire a new junior employee'],\n      startYear: startYear\n    })\n  }\n  startTimer = () => {\n    console.log('starting timer')\n    this.setState({\n      timeRunning: true\n    })\n    this.interval = setInterval(()=>{\n      this.update();\n    },this.state.hourLength)\n  }\n  update = () => {\n    //update time \n    const agency = this.state.agency;\n    let newEmployeeStats = this.state.employeeStats;\n    let hour = this.state.hour;\n    let day = this.state.day;\n    let month = this.state.month;\n    let year = this.state.year;\n    const employees = this.state.employees;\n    const applicants = this.state.applicants;\n    const projects = this.state.projects;\n    const tasks = this.state.tasks;\n    const emails = this.state.emails;\n    const messages = this.state.messages;\n    \n    const employeeStatsRaw = {\n      productivity: 0,\n      happiness: 0,\n      salary: 0,\n    }\n\n    if(this.state.hour >= 11){\n      //new day\n      hour = 0;\n      if(this.state.day >= 30){\n        //new month\n        day = 0;\n        if(this.state.month >= 12){\n          month = 1\n        } else {\n          //new year\n          month = this.state.month + 1;\n          year = this.state.year + 1;\n\n        }\n      } else {\n        day = this.state.day + 1;\n      }\n    } else {\n      hour = this.state.hour + 1;\n    }\n    \n    //daily updates\n    \n    //if the agency runs out of cash or the bosses happiness drops to 0\n    // you're fired\n    if(this.state.agency.coh <= 0 || this.state.employees[0].happiness <= 0){\n      const email = this.randomEmailGenerator.fireEmail(this.state.employees[0]);\n      emails.unshift(email);\n      this.setState({\n        emails: emails\n      })\n      return\n    }\n    const updateHour = Math.floor(Math.random())\n    //daily updates\n    if(hour === 0){\n      //daily employee update\n      for(let a = 0; a < employees.length; a++){\n        //run employee update method\n        employees[a].update();\n        //get new employee stats and add to stats dict\n        employeeStatsRaw.productivity += employees[a].stats.productivity\n        employeeStatsRaw.happiness += employees[a].stats.happiness\n        employeeStatsRaw.salary += employees[a].stats.salary\n        if(employees[a]['quit']){\n          tasks.push('hire someone new');\n          const quitEmail = this.randomEmailGenerator.generateEmail('quit',employees[a]);\n          emails.unshift(quitEmail);\n          employees.splice(a,1)\n        }\n      }\n      newEmployeeStats = {\n        productivity: Math.floor(employeeStatsRaw.productivity/employees.length),\n        happiness: Math.floor(employeeStatsRaw.happiness/employees.length),\n        salary: Math.floor(employeeStatsRaw.salary/employees.length),\n      }\n      const projectsToDelete = [];\n      //daily project update\n      for(let a = 0; a < projects.length; a++){\n        const profit = projects[a].update();\n        if(projects[a].percentComplete >= 100){\n          projectsToDelete.push(projects[a]);\n          agency.update(profit)\n        }\n        //run project update method\n        \n        console.log('$profit',profit)\n        //get paid on the last day of the month\n        if(day === 30 || projects[a].complete){\n          agency.update(profit)\n          \n          console.log('end of the month!');\n          console.log(a);\n        } \n      }\n      for(let b = 0; b < projectsToDelete.length; b++){\n        projects.splice(projectsToDelete[b],1);\n      }\n    } \n    \n    //hourly random events\n    const r = Math.random();\n    if(r < this.state.updateParams.emailFrequency){\n    // if(true){\n      //generate random emails\n      const boss = employees[0];\n      const employee1 = this.helpers.RandomFromArray(employees);\n      const employee2 = this.helpers.RandomFromArray(employees);\n      // console.log(employee);\n      const email = this.randomEmailGenerator.generateRandomEmail(boss,employee1,employee2);\n      emails.unshift(email)\n      \n      //generate random message\n      const employee3 = this.helpers.RandomFromArray(employees);\n      const message = this.randomMessageGenerator.generateMessage(null,\"3:00pm\",employee3);\n      messages.push(message)\n\n      if(hour%2===0 && this.state.applicants < 8){\n        //generate a new applicant\n        if(this.state.applicants.length < 10){\n          const applicant = this.randomEmployeeGenerator.generateRandomEmployee();\n          applicants.push(applicant);\n          const appEmail = this.randomEmailGenerator.generateEmail('applicant',applicant);\n          emails.push(appEmail);\n        }\n      }\n      if(r < this.state.updateParams.projectFrequency){\n        //send a new project offer\n        if(this.state.projects.length < 10){\n          //generate new project\n          //add: be able to use an old company\n          const project = this.state.industry.newProject();\n          projects.push(project);\n          const newProjectEmail = this.randomEmailGenerator.generateEmail('project',project);\n          emails.push(newProjectEmail);\n        }\n      }\n    }\n    const finalEmails = emails.length > 100 ? emails.slice(0,100) : emails;\n    const finalMessages = messages.length > 100 ? messages.slice(0,100) : messages;\n    //set new state\n    this.setState({\n      hour: hour,\n      day: day,\n      month: month,\n      year: year,\n      employees: employees,\n      projects: projects,\n      emails: finalEmails,\n      messages: finalMessages,\n      tasks: tasks,\n      agency: agency,\n      employeeStats: newEmployeeStats,\n    })\n  }\n  stopTimer = () => {\n    console.log('stopping timer')\n    clearInterval(this.interval);\n    this.setState({\n      timeRunning: false\n    })\n  }\n  hireApplicant = (info) => {\n    console.log('hiring applicant', info)\n    //TODO need to get new id number for applicant\n    this.setState({\n      employees: [info, ...this.state.employees]\n    })\n  }\n  updateEmployee = (updatedEmployee) => {\n    console.log('updating employee');\n    console.log(updatedEmployee);\n    const employees = this.state.employees.map((employee) => employee.id !== updatedEmployee.id ? employee: updatedEmployee);\n    if(updatedEmployee.projectId === null){\n      updatedEmployee.project.removeWorker(updatedEmployee);\n    }\n    updatedEmployee.project.calculateProductivity();\n    const projects = this.state.projects.filter((project) => project.id !== updatedEmployee.project.id ? project : updatedEmployee.project);\n    const agency = this.state.agency;\n    agency.calculateAgencyParameters(employees,projects);\n    console.log(updatedEmployee);\n    this.setState({\n      employees: employees,\n      projects: projects,\n      agency: agency\n    })\n  }\n  updateEmployeeLevel = (updatedEmployee) => {\n    console.log('promoting or demoting employee');\n    const employees = this.state.employees.map((employee) => employee.id !== updatedEmployee.id ? employee: updatedEmployee);\n    this.setState({\n      employees: employees\n    })\n  }\n  fireEmployee = (info) => {\n    console.log('firing employee', info)\n    const employees = this.state.employees.filter((employee) => employee.id !== info);\n    const sortedEmployees = this.sortEmployees(employees);\n    this.setState({\n      employees: sortedEmployees\n    })\n  }\n  sortEmployees = (employees) => {\n    return employees.sort(function(a,b){return b.level - a.level})\n  }\n  dismissApplicant = (info) => {\n    console.log('dismissing applicant', info)\n    this.setState({\n      applicants:  this.state.applicants.filter((applicant) => applicant.id !== info)\n    })\n  }\n  generateEmail = (event) => {\n    const email = \"email\";\n    this.setState({\n       emails: [email, ...this.state.emails]\n    })\n  }\n  deleteEmail = (i) => {\n    this.setState({\n      emails: this.state.emails.filter((email,x) => x !== i)\n    })\n  }\n  generateTask = (test,requester,type,target,action,) => {\n    const task = \"task\";\n    this.setState({\n       tasks: [task, ...this.state.tasks]\n    })\n  }\n  resolveTask = (i) => {\n    console.log('resolving task: ' + i)\n    this.setState({\n      tasks: this.state.tasks.filter((tasks,x) => x !== i)\n    })\n  }\n  dismissTask = (i) => {\n    this.setState({\n       tasks: this.state.tasks.filter((task,x) => x!==i )\n    })\n  }\n  addMessage = (message) => {\n\n  }\n  considerProject = (consideredProject) => {\n    console.log('considering project', consideredProject);\n    consideredProject.consider = true;\n    const projects = this.state.projects.map((project) => project.id !== consideredProject.id ? project: consideredProject);\n    this.setState({\n      projects: projects\n    })\n  }\n  acceptProject = (consideredProject) => {\n    console.log('accepting project', consideredProject);\n    consideredProject.accepted = true;\n    const projects = this.state.projects.map((project) => project.id !== consideredProject.id ? project: consideredProject);\n    this.setState({\n      projects: projects\n    })\n  }\n  rejectProject = (rejectedProject) => {\n    console.log('rejecting project', rejectedProject)\n    this.setState({\n      projects: this.state.projects.filter((project) => project.id !== rejectedProject)\n    })\n  }\n  withdrawProject = (withdrawnProject) => {\n    console.log('withdraw project', withdrawnProject)\n    //call to industry to decrease company satisfaction\n    // console.log('removing pane', i);\n    // const activePane = this.state.activePane === i ? i - 1: this.state.activePane;\n    // console.log('old active pane', this.state.activePane);\n    // console.log('new active pane', activePane);\n    console.log(this.state.projects);\n    this.setState({\n      projects: this.state.projects.filter((project) => project.id !== withdrawnProject),\n      panes: this.state.panes.filter((pane) => pane.id !== \"project_\"+withdrawnProject),\n      activePane: this.state.activePane - 1\n    })\n  }\n  addPane = (type,info) => {\n    console.log('adding pane',info);\n    const pane = {type:type,info:info,pinned:false,id:type+\"_\"+info.id}\n    this.setState({\n      panes: [...this.state.panes,pane],\n      activePane: this.state.panes.length\n    })\n  }\n  removePane = (i) => {\n    console.log('removing pane', i);\n    const activePane = this.state.activePane === i ? i - 1: this.state.activePane;\n    console.log('old active pane', this.state.activePane);\n    console.log('new active pane', activePane);\n    this.setState({\n       panes: this.state.panes.filter((pane,x) => i !== x),\n       activePane: activePane\n    })\n  }\n  updatePane = (i) => {\n    this.setState({\n      activePane: i\n    })\n  }\n  openMessage = (text) => {\n    this.setState({\n      message: text\n    })\n  }\n  closeMessage = () => {\n    this.setState({\n      message: null\n    })\n  }\n  render(){\n    // console.log('content state', this.state)\n    return (\n      <React.Fragment>\n          <div className=\"app\">\n                      <Sidebar  employees={this.state.employees} \n                                projects={this.state.projects} \n                                applicants={this.state.applicants} \n                                addPane={this.addPane}\n                                dismissApplicant={this.dismissApplicant}\n                      />\n                        <div className=\"main-container\">\n                        <Header \n                          hour={this.state.hour} \n                          day={this.state.day}\n                          month={this.state.month}\n                          year={this.state.year}\n                          startYear={this.state.startYear}\n                          timeRunning={this.state.timeRunning}   \n                          startTimer={this.startTimer} \n                          stopTimer={this.stopTimer}\n                          agency={this.state.agency}\n                          projects={this.state.projects}\n                          industry={this.state.industry}\n                          employeeStats={this.state.employeeStats}\n                          />\n                          \n                          <Main panes={this.state.panes} \n                                activePane={this.state.activePane}\n                                addPane={this.addPane}\n                                updatePane={this.updatePane} \n                                removePane={this.removePane}\n                                hireApplicant={this.hireApplicant}\n                                dismissApplicant={this.dismissApplicant}\n                                updateEmployee={this.updateEmployee}\n                                updateEmployeeLevel={this.updateEmployeeLevel}\n                                fireEmployee={this.fireEmployee}\n                                resolveTask={this.resolveTask}\n                                considerProject={this.considerProject}\n                                acceptProject={this.acceptProject}\n                                rejectProject={this.rejectProject}\n                                withdrawProject={this.withdrawProject}\n                                emails={this.state.emails}\n                                tasks={this.state.tasks}\n                                projects={this.state.projects}\n                                employees={this.state.employees} \n                                />\n                        </div>\n                <footer></footer>\n                </div>\n                <Message open={this.state.messageOpen} text={this.state.message} closeMessage={this.closeMessage} messages={this.state.messages}/>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Content;\n","import React, {Component} from 'react';\n\nimport Content from '../Content';\n\nimport '../../App.css';\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      testing: true,\n    }\n  }\n  //build out login/logout\n  render(){\n    return (\n      <Content testing={this.state.testing}/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}